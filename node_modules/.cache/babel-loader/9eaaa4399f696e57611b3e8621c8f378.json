{"ast":null,"code":"// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\"; // log\n\nimport { fetchData } from \"../data/dataActions\";\nconst INFURA_ID = \"\";\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    // required\n    options: {\n      infuraId: INFURA_ID,\n      // required\n      rpc: {\n        56: \"https://bsc-dataseed.binance.org/\"\n      }\n    }\n  }\n};\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\"\n  };\n};\n\nconst connectSuccess = payload => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst connectFailed = payload => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload\n  };\n};\n\nconst updateAccountRequest = payload => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload\n  };\n};\n\nexport const connect = () => {\n  return async dispatch => {\n    dispatch(connectRequest());\n\n    try {\n      const abiResponse = await fetch(\"/config/abi.json\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      });\n      const abi = await abiResponse.json();\n      const configResponse = await fetch(\"/config/config.json\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      });\n      const CONFIG = await configResponse.json();\n      localStorage.removeItem(\"walletconnect\");\n      localStorage.removeItem(\"WALLETCONNECT_DEEPLINK_CHOICE\");\n      const web3Modal = new Web3Modal({\n        network: \"mainnet\",\n        // optional\n        cacheProvider: false,\n        // optional\n        providerOptions // required\n\n      });\n      const provider = await web3Modal.connect();\n      const web3 = new Web3(provider);\n      console.log(\"web\", web3);\n      Web3EthContract.setProvider(provider);\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await provider.request({\n        method: \"net_version\"\n      });\n      console.log(\"networkId\", networkId);\n\n      if (networkId == CONFIG.NETWORK.ID) {\n        const SmartContractObj = new Web3EthContract(abi, CONFIG.CONTRACT_ADDRESS);\n        dispatch(connectSuccess({\n          account: accounts[0],\n          smartContract: SmartContractObj,\n          web3: web3\n        })); // Add listeners start\n\n        provider.on(\"accountsChanged\", accounts => {\n          dispatch(updateAccount(accounts[0]));\n        });\n        provider.on(\"chainChanged\", () => {\n          window.location.reload();\n        }); // Add listeners end\n      } else {\n        dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n      }\n    } catch (err) {\n      console.log(\"error\", err, \" message\", err.message);\n\n      if (typeof err !== \"undefined\" && typeof err.message !== \"undefined\" && err.message.includes(\"User Rejected\")) {\n        dispatch(connectFailed(\"User rejected the request\"));\n      } else if ((typeof err === \"string\" || err instanceof String) && err.includes(\"Modal closed by user\")) {\n        dispatch(connectFailed(\"Modal closed by user\"));\n      } else {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    }\n  };\n};\nexport const updateAccount = account => {\n  return async dispatch => {\n    dispatch(updateAccountRequest({\n      account: account\n    }));\n    dispatch(fetchData(account));\n  };\n};","map":{"version":3,"sources":["/Users/mohammedchoudhury/Documents/Coding/Crypto/NFTS/FUKU/FUKU Minting Dapp/src/redux/blockchain/blockchainActions.js"],"names":["Web3EthContract","Web3","Web3Modal","WalletConnectProvider","fetchData","INFURA_ID","providerOptions","walletconnect","package","options","infuraId","rpc","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","abiResponse","fetch","headers","Accept","abi","json","configResponse","CONFIG","localStorage","removeItem","web3Modal","network","cacheProvider","provider","web3","console","log","setProvider","accounts","eth","getAccounts","networkId","request","method","NETWORK","ID","SmartContractObj","CONTRACT_ADDRESS","account","smartContract","on","updateAccount","window","location","reload","NAME","err","message","includes","String"],"mappings":"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","sourcesContent":["// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\n\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst INFURA_ID = \"\";\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider, // required\n    options: {\n      infuraId: INFURA_ID, // required\n      rpc: {\n        56: \"https://bsc-dataseed.binance.org/\", \n      },\n    },\n  },\n\n};\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    try {\n      const abiResponse = await fetch(\"/config/abi.json\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      });\n      const abi = await abiResponse.json();\n      const configResponse = await fetch(\"/config/config.json\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      });\n      const CONFIG = await configResponse.json();\n      localStorage.removeItem(\"walletconnect\");\n      localStorage.removeItem(\"WALLETCONNECT_DEEPLINK_CHOICE\");\n      const web3Modal = new Web3Modal({\n        network: \"mainnet\", // optional\n        cacheProvider: false, // optional\n        providerOptions, // required\n      });\n      const provider = await web3Modal.connect();\n      const web3 = new Web3(provider);\n      console.log(\"web\", web3);\n\n      Web3EthContract.setProvider(provider);\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await provider.request({\n        method: \"net_version\",\n      });\n      console.log(\"networkId\", networkId);\n      if (networkId == CONFIG.NETWORK.ID) {\n        const SmartContractObj = new Web3EthContract(\n          abi,\n          CONFIG.CONTRACT_ADDRESS\n        );\n        dispatch(\n          connectSuccess({\n            account: accounts[0],\n            smartContract: SmartContractObj,\n            web3: web3,\n          })\n        );\n        // Add listeners start\n        provider.on(\"accountsChanged\", (accounts) => {\n          dispatch(updateAccount(accounts[0]));\n        });\n        provider.on(\"chainChanged\", () => {\n          window.location.reload();\n        });\n        // Add listeners end\n      } else {\n        dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n      }\n    } catch (err) {\n      console.log(\"error\", err, \" message\", err.message);\n      if (\n        typeof err !== \"undefined\" &&\n        typeof err.message !== \"undefined\" &&\n        err.message.includes(\"User Rejected\")\n      ) {\n        dispatch(connectFailed(\"User rejected the request\"));\n      } else if (\n        (typeof err === \"string\" || err instanceof String) &&\n        err.includes(\"Modal closed by user\")\n      ) {\n        dispatch(connectFailed(\"Modal closed by user\"));\n      } else {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}