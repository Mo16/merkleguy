{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/mohammedchoudhury/Documents/Coding/Crypto/NFTS/cozy camp/minting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"/Users/mohammedchoudhury/Documents/Coding/Crypto/NFTS/cozy camp/minting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/mohammedchoudhury/Documents/Coding/Crypto/NFTS/cozy camp/minting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/Users/mohammedchoudhury/Documents/Coding/Crypto/NFTS/cozy camp/minting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/mohammedchoudhury/Documents/Coding/Crypto/NFTS/cozy camp/minting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mohammedchoudhury/Documents/Coding/Crypto/NFTS/cozy camp/minting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/mohammedchoudhury/Documents/Coding/Crypto/NFTS/cozy camp/minting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/mohammedchoudhury/Documents/Coding/Crypto/NFTS/cozy camp/minting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MerkleTree = void 0;\n\nvar buffer_reverse_1 = __importDefault(require(\"buffer-reverse\"));\n\nvar sha256_1 = __importDefault(require(\"crypto-js/sha256\"));\n\nvar Base_1 = __importDefault(require(\"./Base\"));\n\nvar treeify_1 = __importDefault(require(\"treeify\"));\n/**\n * Class reprensenting a Merkle Tree\n * @namespace MerkleTree\n */\n\n\nvar MerkleTree = /*#__PURE__*/function (_Base_1$default) {\n  _inherits(MerkleTree, _Base_1$default);\n\n  var _super = _createSuper(MerkleTree);\n\n  /**\n   * @desc Constructs a Merkle Tree.\n   * All nodes and leaves are stored as Buffers.\n   * Lonely leaf nodes are promoted to the next level up without being hashed again.\n   * @param {Buffer[]} leaves - Array of hashed leaves. Each leaf must be a Buffer.\n   * @param {Function} hashFunction - Hash function to use for hashing leaves and nodes\n   * @param {Object} options - Additional options\n   * @example\n   *```js\n   *const MerkleTree = require('merkletreejs')\n   *const crypto = require('crypto')\n   *\n   *function sha256(data) {\n   *  // returns Buffer\n   *  return crypto.createHash('sha256').update(data).digest()\n   *}\n   *\n   *const leaves = ['a', 'b', 'c'].map(value => keccak(value))\n   *\n   *const tree = new MerkleTree(leaves, sha256)\n   *```\n   */\n  function MerkleTree(leaves) {\n    var _this;\n\n    var hashFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : sha256_1.default;\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, MerkleTree);\n\n    _this = _super.call(this);\n    _this.duplicateOdd = false;\n    _this.hashLeaves = false;\n    _this.isBitcoinTree = false;\n    _this.leaves = [];\n    _this.layers = [];\n    _this.sortLeaves = false;\n    _this.sortPairs = false;\n    _this.sort = false;\n    _this.fillDefaultHash = null;\n    _this.isBitcoinTree = !!options.isBitcoinTree;\n    _this.hashLeaves = !!options.hashLeaves;\n    _this.sortLeaves = !!options.sortLeaves;\n    _this.sortPairs = !!options.sortPairs;\n\n    if (options.fillDefaultHash) {\n      if (typeof options.fillDefaultHash === 'function') {\n        _this.fillDefaultHash = options.fillDefaultHash;\n      } else if (Buffer.isBuffer(options.fillDefaultHash) || typeof options.fillDefaultHash === 'string') {\n        _this.fillDefaultHash = function (idx, hashFn) {\n          return options.fillDefaultHash;\n        };\n      } else {\n        throw new Error('method \"fillDefaultHash\" must be a function, Buffer, or string');\n      }\n    }\n\n    _this.sort = !!options.sort;\n\n    if (_this.sort) {\n      _this.sortLeaves = true;\n      _this.sortPairs = true;\n    }\n\n    _this.duplicateOdd = !!options.duplicateOdd;\n    _this.hashFn = _this.bufferifyFn(hashFn);\n\n    _this.processLeaves(leaves);\n\n    return _this;\n  }\n\n  _createClass(MerkleTree, [{\n    key: \"processLeaves\",\n    value: function processLeaves(leaves) {\n      if (this.hashLeaves) {\n        leaves = leaves.map(this.hashFn);\n      }\n\n      this.leaves = leaves.map(this.bufferify);\n\n      if (this.sortLeaves) {\n        this.leaves = this.leaves.sort(Buffer.compare);\n      }\n\n      if (this.fillDefaultHash) {\n        for (var i = 0; i < Math.pow(2, Math.ceil(Math.log2(this.leaves.length))); i++) {\n          if (i >= this.leaves.length) {\n            this.leaves.push(this.bufferify(this.fillDefaultHash(i, this.hashFn)));\n          }\n        }\n      }\n\n      this.layers = [this.leaves];\n\n      this._createHashes(this.leaves);\n    }\n  }, {\n    key: \"_createHashes\",\n    value: function _createHashes(nodes) {\n      while (nodes.length > 1) {\n        var layerIndex = this.layers.length;\n        this.layers.push([]);\n\n        for (var i = 0; i < nodes.length; i += 2) {\n          if (i + 1 === nodes.length) {\n            if (nodes.length % 2 === 1) {\n              var _data = nodes[nodes.length - 1];\n              var _hash = _data; // is bitcoin tree\n\n              if (this.isBitcoinTree) {\n                // Bitcoin method of duplicating the odd ending nodes\n                _data = Buffer.concat([buffer_reverse_1.default(_data), buffer_reverse_1.default(_data)]);\n                _hash = this.hashFn(_data);\n                _hash = buffer_reverse_1.default(this.hashFn(_hash));\n                this.layers[layerIndex].push(_hash);\n                continue;\n              } else {\n                if (this.duplicateOdd) {// continue with creating layer\n                } else {\n                  // push copy of hash and continue iteration\n                  this.layers[layerIndex].push(nodes[i]);\n                  continue;\n                }\n              }\n            }\n          }\n\n          var left = nodes[i];\n          var right = i + 1 === nodes.length ? left : nodes[i + 1];\n          var data = null;\n          var combined = null;\n\n          if (this.isBitcoinTree) {\n            combined = [buffer_reverse_1.default(left), buffer_reverse_1.default(right)];\n          } else {\n            combined = [left, right];\n          }\n\n          if (this.sortPairs) {\n            combined.sort(Buffer.compare);\n          }\n\n          data = Buffer.concat(combined);\n          var hash = this.hashFn(data); // double hash if bitcoin tree\n\n          if (this.isBitcoinTree) {\n            hash = buffer_reverse_1.default(this.hashFn(hash));\n          }\n\n          this.layers[layerIndex].push(hash);\n        }\n\n        nodes = this.layers[layerIndex];\n      }\n    }\n    /**\n     * addLeaf\n     * @desc Adds a leaf to the tree and re-calculates layers.\n     * @param {String|Buffer} - Leaf\n     * @param {Boolean} - Set to true if the leaf should be hashed before being added to tree.\n     * @example\n     *```js\n     *tree.addLeaf(newLeaf)\n     *```\n     */\n\n  }, {\n    key: \"addLeaf\",\n    value: function addLeaf(leaf) {\n      var shouldHash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (shouldHash) {\n        leaf = this.hashFn(leaf);\n      }\n\n      this.processLeaves(this.leaves.concat(leaf));\n    }\n    /**\n     * addLeaves\n     * @desc Adds multiple leaves to the tree and re-calculates layers.\n     * @param {String[]|Buffer[]} - Array of leaves\n     * @param {Boolean} - Set to true if the leaves should be hashed before being added to tree.\n     * @example\n     *```js\n     *tree.addLeaves(newLeaves)\n     *```\n     */\n\n  }, {\n    key: \"addLeaves\",\n    value: function addLeaves(leaves) {\n      var shouldHash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (shouldHash) {\n        leaves = leaves.map(this.hashFn);\n      }\n\n      this.processLeaves(this.leaves.concat(leaves));\n    }\n    /**\n     * getLeaves\n     * @desc Returns array of leaves of Merkle Tree.\n     * @return {Buffer[]}\n     * @example\n     *```js\n     *const leaves = tree.getLeaves()\n     *```\n     */\n\n  }, {\n    key: \"getLeaves\",\n    value: function getLeaves(values) {\n      var _this2 = this;\n\n      if (Array.isArray(values)) {\n        if (this.hashLeaves) {\n          values = values.map(this.hashFn);\n\n          if (this.sortLeaves) {\n            values = values.sort(Buffer.compare);\n          }\n        }\n\n        return this.leaves.filter(function (leaf) {\n          return _this2._bufferIndexOf(values, leaf) !== -1;\n        });\n      }\n\n      return this.leaves;\n    }\n    /**\n     * getLeaf\n     * @desc Returns the leaf at the given index.\n     * @param {Number} - Index number\n     * @return {Buffer}\n     * @example\n     *```js\n     *const leaf = tree.getLeaf(1)\n     *```\n     */\n\n  }, {\n    key: \"getLeaf\",\n    value: function getLeaf(index) {\n      if (index < 0 || index > this.leaves.length - 1) {\n        return Buffer.from([]);\n      }\n\n      return this.leaves[index];\n    }\n    /**\n     * getLeafIndex\n     * @desc Returns the index of the given leaf, or -1 if the leaf is not found.\n     * @param {String|Buffer} - Target leaf\n     * @return {number}\n     * @example\n     *```js\n     *const leaf = Buffer.from('abc')\n     *const index = tree.getLeafIndex(leaf)\n     *```\n     */\n\n  }, {\n    key: \"getLeafIndex\",\n    value: function getLeafIndex(target) {\n      target = this.bufferify(target);\n      var leaves = this.getLeaves();\n\n      for (var i = 0; i < leaves.length; i++) {\n        var leaf = leaves[i];\n\n        if (leaf.equals(target)) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n    /**\n     * getLeafCount\n     * @desc Returns the total number of leaves.\n     * @return {number}\n     * @example\n     *```js\n     *const count = tree.getLeafCount()\n     *```\n     */\n\n  }, {\n    key: \"getLeafCount\",\n    value: function getLeafCount() {\n      return this.leaves.length;\n    }\n    /**\n     * getHexLeaves\n     * @desc Returns array of leaves of Merkle Tree as hex strings.\n     * @return {String[]}\n     * @example\n     *```js\n     *const leaves = tree.getHexLeaves()\n     *```\n     */\n\n  }, {\n    key: \"getHexLeaves\",\n    value: function getHexLeaves() {\n      var _this3 = this;\n\n      return this.leaves.map(function (leaf) {\n        return _this3.bufferToHex(leaf);\n      });\n    }\n    /**\n     * marshalLeaves\n     * @desc Returns array of leaves of Merkle Tree as a JSON string.\n     * @param {String[]|Buffer[]} - Merkle tree leaves\n     * @return {String} - List of leaves as JSON string\n     * @example\n     *```js\n     *const jsonStr = MerkleTree.marshalLeaves(leaves)\n     *```\n     */\n\n  }, {\n    key: \"getLayers\",\n    value:\n    /**\n     * getLayers\n     * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root.\n     * @return {Buffer[]}\n     * @example\n     *```js\n     *const layers = tree.getLayers()\n     *```\n     */\n    function getLayers() {\n      return this.layers;\n    }\n    /**\n     * getHexLayers\n     * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root as hex strings.\n     * @return {String[]}\n     * @example\n     *```js\n     *const layers = tree.getHexLayers()\n     *```\n     */\n\n  }, {\n    key: \"getHexLayers\",\n    value: function getHexLayers() {\n      var _this4 = this;\n\n      return this.layers.reduce(function (acc, item) {\n        if (Array.isArray(item)) {\n          acc.push(item.map(function (layer) {\n            return _this4.bufferToHex(layer);\n          }));\n        } else {\n          acc.push(item);\n        }\n\n        return acc;\n      }, []);\n    }\n    /**\n     * getLayersFlat\n     * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root.\n     * @return {Buffer[]}\n     * @example\n     *```js\n     *const layers = tree.getLayersFlat()\n     *```\n     */\n\n  }, {\n    key: \"getLayersFlat\",\n    value: function getLayersFlat() {\n      var layers = this.layers.reduce(function (acc, item) {\n        if (Array.isArray(item)) {\n          acc.unshift.apply(acc, _toConsumableArray(item));\n        } else {\n          acc.unshift(item);\n        }\n\n        return acc;\n      }, []);\n      layers.unshift(Buffer.from([0]));\n      return layers;\n    }\n    /**\n     * getHexLayersFlat\n     * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root as hex string.\n     * @return {String[]}\n     * @example\n     *```js\n     *const layers = tree.getHexLayersFlat()\n     *```\n     */\n\n  }, {\n    key: \"getHexLayersFlat\",\n    value: function getHexLayersFlat() {\n      var _this5 = this;\n\n      return this.getLayersFlat().map(function (layer) {\n        return _this5.bufferToHex(layer);\n      });\n    }\n    /**\n     * getLayerCount\n     * @desc Returns the total number of layers.\n     * @return {number}\n     * @example\n     *```js\n     *const count = tree.getLayerCount()\n     *```\n     */\n\n  }, {\n    key: \"getLayerCount\",\n    value: function getLayerCount() {\n      return this.getLayers().length;\n    }\n    /**\n     * getRoot\n     * @desc Returns the Merkle root hash as a Buffer.\n     * @return {Buffer}\n     * @example\n     *```js\n     *const root = tree.getRoot()\n     *```\n     */\n\n  }, {\n    key: \"getRoot\",\n    value: function getRoot() {\n      if (this.layers.length === 0) {\n        return Buffer.from([]);\n      }\n\n      return this.layers[this.layers.length - 1][0] || Buffer.from([]);\n    }\n    /**\n     * getHexRoot\n     * @desc Returns the Merkle root hash as a hex string.\n     * @return {String}\n     * @example\n     *```js\n     *const root = tree.getHexRoot()\n     *```\n     */\n\n  }, {\n    key: \"getHexRoot\",\n    value: function getHexRoot() {\n      return this.bufferToHex(this.getRoot());\n    }\n    /**\n     * getProof\n     * @desc Returns the proof for a target leaf.\n     * @param {Buffer} leaf - Target leaf\n     * @param {Number} [index] - Target leaf index in leaves array.\n     * Use if there are leaves containing duplicate data in order to distinguish it.\n     * @return {Object[]} - Array of objects containing a position property of type string\n     * with values of 'left' or 'right' and a data property of type Buffer.\n     * @example\n     * ```js\n     *const proof = tree.getProof(leaves[2])\n     *```\n     *\n     * @example\n     *```js\n     *const leaves = ['a', 'b', 'a'].map(value => keccak(value))\n     *const tree = new MerkleTree(leaves, keccak)\n     *const proof = tree.getProof(leaves[2], 2)\n     *```\n     */\n\n  }, {\n    key: \"getProof\",\n    value: function getProof(leaf, index) {\n      if (typeof leaf === 'undefined') {\n        throw new Error('leaf is required');\n      }\n\n      leaf = this.bufferify(leaf);\n      var proof = [];\n\n      if (!Number.isInteger(index)) {\n        index = -1;\n\n        for (var i = 0; i < this.leaves.length; i++) {\n          if (Buffer.compare(leaf, this.leaves[i]) === 0) {\n            index = i;\n          }\n        }\n      }\n\n      if (index <= -1) {\n        return [];\n      }\n\n      for (var _i = 0; _i < this.layers.length; _i++) {\n        var layer = this.layers[_i];\n        var isRightNode = index % 2;\n        var pairIndex = isRightNode ? index - 1 : this.isBitcoinTree && index === layer.length - 1 && _i < this.layers.length - 1 // Proof Generation for Bitcoin Trees\n        ? index // Proof Generation for Non-Bitcoin Trees\n        : index + 1;\n\n        if (pairIndex < layer.length) {\n          proof.push({\n            position: isRightNode ? 'left' : 'right',\n            data: layer[pairIndex]\n          });\n        } // set index to parent index\n\n\n        index = index / 2 | 0;\n      }\n\n      return proof;\n    }\n    /**\n     * getHexProof\n     * @desc Returns the proof for a target leaf as hex strings.\n     * @param {Buffer} leaf - Target leaf\n     * @param {Number} [index] - Target leaf index in leaves array.\n     * Use if there are leaves containing duplicate data in order to distinguish it.\n     * @return {String[]} - Proof array as hex strings.\n     * @example\n     * ```js\n     *const proof = tree.getHexProof(leaves[2])\n     *```\n     */\n\n  }, {\n    key: \"getHexProof\",\n    value: function getHexProof(leaf, index) {\n      var _this6 = this;\n\n      return this.getProof(leaf, index).map(function (item) {\n        return _this6.bufferToHex(item.data);\n      });\n    }\n    /**\n    * getPositionalHexProof\n    * @desc Returns the proof for a target leaf as hex strings and the position in binary (left == 0).\n    * @param {Buffer} leaf - Target leaf\n    * @param {Number} [index] - Target leaf index in leaves array.\n    * Use if there are leaves containing duplicate data in order to distinguish it.\n    * @return {(string | number)[][]} - Proof array as hex strings. position at index 0\n    * @example\n    * ```js\n    *const proof = tree.getPositionalHexProof(leaves[2])\n    *```\n    */\n\n  }, {\n    key: \"getPositionalHexProof\",\n    value: function getPositionalHexProof(leaf, index) {\n      var _this7 = this;\n\n      return this.getProof(leaf, index).map(function (item) {\n        return [item.position === 'left' ? 0 : 1, _this7.bufferToHex(item.data)];\n      });\n    }\n    /**\n     * marshalProof\n     * @desc Returns proof array as JSON string.\n     * @param {String[]|Object[]} proof - Merkle tree proof array\n     * @return {String} - Proof array as JSON string.\n     * @example\n     * ```js\n     *const jsonStr = MerkleTree.marshalProof(proof)\n     *```\n     */\n\n  }, {\n    key: \"getProofIndices\",\n    value:\n    /**\n     * getProofIndices\n     * @desc Returns the proof indices for given tree indices.\n     * @param {Number[]} treeIndices - Tree indices\n     * @param {Number} depth - Tree depth; number of layers.\n     * @return {Number[]} - Proof indices\n     * @example\n     * ```js\n     *const proofIndices = tree.getProofIndices([2,5,6], 4)\n     *console.log(proofIndices) // [ 23, 20, 19, 8, 3 ]\n     *```\n     */\n    function getProofIndices(treeIndices, depth) {\n      var leafCount = Math.pow(2, depth);\n      var maximalIndices = new Set();\n\n      var _iterator = _createForOfIteratorHelper(treeIndices),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var index = _step.value;\n          var x = leafCount + index;\n\n          while (x > 1) {\n            maximalIndices.add(x ^ 1);\n            x = x / 2 | 0;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var a = treeIndices.map(function (index) {\n        return leafCount + index;\n      });\n      var b = Array.from(maximalIndices).sort(function (a, b) {\n        return a - b;\n      }).reverse();\n      maximalIndices = a.concat(b);\n      var redundantIndices = new Set();\n      var proof = [];\n\n      var _iterator2 = _createForOfIteratorHelper(maximalIndices),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _index = _step2.value;\n\n          if (!redundantIndices.has(_index)) {\n            proof.push(_index);\n\n            while (_index > 1) {\n              redundantIndices.add(_index);\n              if (!redundantIndices.has(_index ^ 1)) break;\n              _index = _index / 2 | 0;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return proof.filter(function (index) {\n        return !treeIndices.includes(index - leafCount);\n      });\n    }\n  }, {\n    key: \"getProofIndicesForUnevenTree\",\n    value: function getProofIndicesForUnevenTree(sortedLeafIndices, leavesCount) {\n      var depth = Math.ceil(Math.log2(leavesCount));\n      var unevenLayers = [];\n\n      for (var index = 0; index < depth; index++) {\n        var unevenLayer = leavesCount % 2 !== 0;\n\n        if (unevenLayer) {\n          unevenLayers.push({\n            index: index,\n            leavesCount: leavesCount\n          });\n        }\n\n        leavesCount = Math.ceil(leavesCount / 2);\n      }\n\n      var proofIndices = [];\n      var layerNodes = sortedLeafIndices;\n\n      var _loop = function _loop(layerIndex) {\n        var siblingIndices = layerNodes.map(function (index) {\n          if (index % 2 === 0) {\n            return index + 1;\n          }\n\n          return index - 1;\n        });\n        var proofNodeIndices = siblingIndices.filter(function (index) {\n          return !layerNodes.includes(index);\n        });\n        var unevenLayer = unevenLayers.find(function (_ref) {\n          var index = _ref.index;\n          return index === layerIndex;\n        });\n\n        if (unevenLayer && layerNodes.includes(unevenLayer.leavesCount - 1)) {\n          proofNodeIndices = proofNodeIndices.slice(0, -1);\n        }\n\n        proofIndices.push(proofNodeIndices);\n        layerNodes = _toConsumableArray(new Set(layerNodes.map(function (index) {\n          if (index % 2 === 0) {\n            return index / 2;\n          }\n\n          if (index % 2 === 0) {\n            return (index + 1) / 2;\n          }\n\n          return (index - 1) / 2;\n        })));\n      };\n\n      for (var layerIndex = 0; layerIndex < depth; layerIndex++) {\n        _loop(layerIndex);\n      }\n\n      return proofIndices;\n    }\n    /**\n     * getMultiProof\n     * @desc Returns the multiproof for given tree indices.\n     * @param {Number[]} indices - Tree indices.\n     * @return {Buffer[]} - Multiproofs\n     * @example\n     * ```js\n     *const indices = [2, 5, 6]\n     *const proof = tree.getMultiProof(indices)\n     *```\n     */\n\n  }, {\n    key: \"getMultiProof\",\n    value: function getMultiProof(tree, indices) {\n      var _this8 = this;\n\n      if (!indices) {\n        indices = tree;\n        tree = this.getLayersFlat();\n      }\n\n      var isUneven = this.isUnevenTree();\n\n      if (isUneven) {\n        if (indices.every(Number.isInteger)) {\n          return this.getMultiProofForUnevenTree(indices);\n        }\n      }\n\n      if (!indices.every(Number.isInteger)) {\n        var els = indices;\n\n        if (this.sortPairs) {\n          els = els.sort(Buffer.compare);\n        }\n\n        var ids = els.map(function (el) {\n          return _this8._bufferIndexOf(_this8.leaves, el);\n        }).sort(function (a, b) {\n          return a === b ? 0 : a > b ? 1 : -1;\n        });\n\n        if (!ids.every(function (idx) {\n          return idx !== -1;\n        })) {\n          throw new Error('Element does not exist in Merkle tree');\n        }\n\n        var hashes = [];\n        var proof = [];\n        var nextIds = [];\n\n        for (var i = 0; i < this.layers.length; i++) {\n          var layer = this.layers[i];\n\n          for (var j = 0; j < ids.length; j++) {\n            var idx = ids[j];\n\n            var pairElement = this._getPairNode(layer, idx);\n\n            hashes.push(layer[idx]);\n\n            if (pairElement) {\n              proof.push(pairElement);\n            }\n\n            nextIds.push(idx / 2 | 0);\n          }\n\n          ids = nextIds.filter(function (value, i, self) {\n            return self.indexOf(value) === i;\n          });\n          nextIds = [];\n        }\n\n        return proof.filter(function (value) {\n          return !hashes.includes(value);\n        });\n      }\n\n      return this.getProofIndices(indices, this._log2(tree.length / 2 | 0)).map(function (index) {\n        return tree[index];\n      });\n    }\n  }, {\n    key: \"getMultiProofForUnevenTree\",\n    value: function getMultiProofForUnevenTree(tree, indices) {\n      if (!indices) {\n        indices = tree;\n        tree = this.getLayers();\n      }\n\n      var proofHashes = [];\n      var currentLayerIndices = indices;\n\n      var _iterator3 = _createForOfIteratorHelper(tree),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var treeLayer = _step3.value;\n          var siblings = [];\n\n          var _iterator4 = _createForOfIteratorHelper(currentLayerIndices),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var index = _step4.value;\n\n              if (index % 2 === 0) {\n                var _idx = index + 1;\n\n                if (!currentLayerIndices.includes(_idx)) {\n                  if (treeLayer[_idx]) {\n                    siblings.push(treeLayer[_idx]);\n                    continue;\n                  }\n                }\n              }\n\n              var idx = index - 1;\n\n              if (!currentLayerIndices.includes(idx)) {\n                if (treeLayer[idx]) {\n                  siblings.push(treeLayer[idx]);\n                  continue;\n                }\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n\n          proofHashes = proofHashes.concat(siblings);\n          var uniqueIndices = new Set();\n\n          var _iterator5 = _createForOfIteratorHelper(currentLayerIndices),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var _index2 = _step5.value;\n\n              if (_index2 % 2 === 0) {\n                uniqueIndices.add(_index2 / 2);\n                continue;\n              }\n\n              if (_index2 % 2 === 0) {\n                uniqueIndices.add((_index2 + 1) / 2);\n                continue;\n              }\n\n              uniqueIndices.add((_index2 - 1) / 2);\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n\n          currentLayerIndices = Array.from(uniqueIndices);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return proofHashes;\n    }\n    /**\n     * getHexMultiProof\n     * @desc Returns the multiproof for given tree indices as hex strings.\n     * @param {Number[]} indices - Tree indices.\n     * @return {String[]} - Multiproofs as hex strings.\n     * @example\n     * ```js\n     *const indices = [2, 5, 6]\n     *const proof = tree.getHexMultiProof(indices)\n     *```\n     */\n\n  }, {\n    key: \"getHexMultiProof\",\n    value: function getHexMultiProof(tree, indices) {\n      var _this9 = this;\n\n      return this.getMultiProof(tree, indices).map(function (x) {\n        return _this9.bufferToHex(x);\n      });\n    }\n    /**\n     * getProofFlags\n     * @desc Returns list of booleans where proofs should be used instead of hashing.\n     * Proof flags are used in the Solidity multiproof verifiers.\n     * @param {Number[]|Buffer[]} leaves\n     * @param {Buffer[]} proofs\n     * @return {Boolean[]} - Boolean flags\n     * @example\n     * ```js\n     *const indices = [2, 5, 6]\n     *const proof = tree.getMultiProof(indices)\n     *const proofFlags = tree.getProofFlags(leaves, proof)\n     *```\n     */\n\n  }, {\n    key: \"getProofFlags\",\n    value: function getProofFlags(leaves, proofs) {\n      var _this10 = this;\n\n      if (!Array.isArray(leaves) || leaves.length <= 0) {\n        throw new Error('Invalid Inputs!');\n      }\n\n      var ids;\n\n      if (leaves.every(Number.isInteger)) {\n        ids = leaves.sort(function (a, b) {\n          return a === b ? 0 : a > b ? 1 : -1;\n        }); // Indices where passed\n      } else {\n        ids = leaves.map(function (el) {\n          return _this10._bufferIndexOf(_this10.leaves, el);\n        }).sort(function (a, b) {\n          return a === b ? 0 : a > b ? 1 : -1;\n        });\n      }\n\n      if (!ids.every(function (idx) {\n        return idx !== -1;\n      })) {\n        throw new Error('Element does not exist in Merkle tree');\n      }\n\n      var _proofs = proofs.map(function (item) {\n        return _this10.bufferify(item);\n      });\n\n      var tested = [];\n      var flags = [];\n\n      var _loop2 = function _loop2(index) {\n        var layer = _this10.layers[index];\n        ids = ids.reduce(function (ids, idx) {\n          var skipped = tested.includes(layer[idx]);\n\n          if (!skipped) {\n            var pairElement = _this10._getPairNode(layer, idx);\n\n            var proofUsed = _proofs.includes(layer[idx]) || _proofs.includes(pairElement);\n\n            pairElement && flags.push(!proofUsed);\n            tested.push(layer[idx]);\n            tested.push(pairElement);\n          }\n\n          ids.push(idx / 2 | 0);\n          return ids;\n        }, []);\n      };\n\n      for (var index = 0; index < this.layers.length; index++) {\n        _loop2(index);\n      }\n\n      return flags;\n    }\n    /**\n     * verify\n     * @desc Returns true if the proof path (array of hashes) can connect the target node\n     * to the Merkle root.\n     * @param {Object[]} proof - Array of proof objects that should connect\n     * target node to Merkle root.\n     * @param {Buffer} targetNode - Target node Buffer\n     * @param {Buffer} root - Merkle root Buffer\n     * @return {Boolean}\n     * @example\n     *```js\n     *const root = tree.getRoot()\n     *const proof = tree.getProof(leaves[2])\n     *const verified = tree.verify(proof, leaves[2], root)\n     *```\n     */\n\n  }, {\n    key: \"verify\",\n    value: function verify(proof, targetNode, root) {\n      var hash = this.bufferify(targetNode);\n      root = this.bufferify(root);\n\n      if (!Array.isArray(proof) || !targetNode || !root) {\n        return false;\n      }\n\n      for (var i = 0; i < proof.length; i++) {\n        var node = proof[i];\n        var data = null;\n        var isLeftNode = null; // case for when proof is hex values only\n\n        if (typeof node === 'string') {\n          data = this.bufferify(node);\n          isLeftNode = true;\n        } else if (Array.isArray(node)) {\n          isLeftNode = node[0] === 0;\n          data = this.bufferify(node[1]);\n        } else if (Buffer.isBuffer(node)) {\n          data = node;\n          isLeftNode = true;\n        } else if (node instanceof Object) {\n          data = this.bufferify(node.data);\n          isLeftNode = node.position === 'left';\n        } else {\n          throw new Error('Expected node to be of type string or object');\n        }\n\n        var buffers = [];\n\n        if (this.isBitcoinTree) {\n          buffers.push(buffer_reverse_1.default(hash));\n          buffers[isLeftNode ? 'unshift' : 'push'](buffer_reverse_1.default(data));\n          hash = this.hashFn(Buffer.concat(buffers));\n          hash = buffer_reverse_1.default(this.hashFn(hash));\n        } else {\n          if (this.sortPairs) {\n            if (Buffer.compare(hash, data) === -1) {\n              buffers.push(hash, data);\n              hash = this.hashFn(Buffer.concat(buffers));\n            } else {\n              buffers.push(data, hash);\n              hash = this.hashFn(Buffer.concat(buffers));\n            }\n          } else {\n            buffers.push(hash);\n            buffers[isLeftNode ? 'unshift' : 'push'](data);\n            hash = this.hashFn(Buffer.concat(buffers));\n          }\n        }\n      }\n\n      return Buffer.compare(hash, root) === 0;\n    }\n    /**\n     * verifyMultiProof\n     * @desc Returns true if the multiproofs can connect the leaves to the Merkle root.\n     * @param {Buffer} root - Merkle tree root\n     * @param {Number[]} proofIndices - Leave indices for proof\n     * @param {Buffer[]} proofLeaves - Leaf values at indices for proof\n     * @param {Number} leavesCount - Count of original leaves\n     * @param {Buffer[]} proof - Multiproofs given indices\n     * @return {Boolean}\n     * @example\n     *```js\n     *const leaves = tree.getLeaves()\n     *const root = tree.getRoot()\n     *const treeFlat = tree.getLayersFlat()\n     *const leavesCount = leaves.length\n     *const proofIndices = [2, 5, 6]\n     *const proofLeaves = proofIndices.map(i => leaves[i])\n     *const proof = tree.getMultiProof(treeFlat, indices)\n     *const verified = tree.verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof)\n     *```\n     */\n\n  }, {\n    key: \"verifyMultiProof\",\n    value: function verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof) {\n      var _this11 = this;\n\n      var isUneven = this.isUnevenTree();\n\n      if (isUneven) {\n        // TODO: combine these functions and simplify\n        return this.verifyMultiProofForUnevenTree(root, proofIndices, proofLeaves, leavesCount, proof);\n      }\n\n      var depth = Math.ceil(Math.log2(leavesCount));\n      root = this.bufferify(root);\n      proofLeaves = proofLeaves.map(function (leaf) {\n        return _this11.bufferify(leaf);\n      });\n      proof = proof.map(function (leaf) {\n        return _this11.bufferify(leaf);\n      });\n      var tree = {};\n\n      var _iterator6 = _createForOfIteratorHelper(this._zip(proofIndices, proofLeaves)),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _step6$value = _slicedToArray(_step6.value, 2),\n              _index3 = _step6$value[0],\n              leaf = _step6$value[1];\n\n          tree[Math.pow(2, depth) + _index3] = leaf;\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(this._zip(this.getProofIndices(proofIndices, depth), proof)),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _step7$value = _slicedToArray(_step7.value, 2),\n              _index4 = _step7$value[0],\n              proofitem = _step7$value[1];\n\n          tree[_index4] = proofitem;\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      var indexqueue = Object.keys(tree).map(function (value) {\n        return +value;\n      }).sort(function (a, b) {\n        return a - b;\n      });\n      indexqueue = indexqueue.slice(0, indexqueue.length - 1);\n      var i = 0;\n\n      while (i < indexqueue.length) {\n        var index = indexqueue[i];\n\n        if (index >= 2 && {}.hasOwnProperty.call(tree, index ^ 1)) {\n          var pair = [tree[index - index % 2], tree[index - index % 2 + 1]];\n\n          if (this.sortPairs) {\n            pair = pair.sort(Buffer.compare);\n          }\n\n          var hash = pair[1] ? this.hashFn(Buffer.concat(pair)) : pair[0];\n          tree[index / 2 | 0] = hash;\n          indexqueue.push(index / 2 | 0);\n        }\n\n        i += 1;\n      }\n\n      return !proofIndices.length || {}.hasOwnProperty.call(tree, 1) && tree[1].equals(root);\n    }\n  }, {\n    key: \"verifyMultiProofWithFlags\",\n    value: function verifyMultiProofWithFlags(root, leaves, proofs, proofFlag) {\n      root = this.bufferify(root);\n      leaves = leaves.map(this.bufferify);\n      proofs = proofs.map(this.bufferify);\n      var leavesLen = leaves.length;\n      var totalHashes = proofFlag.length;\n      var hashes = [];\n      var leafPos = 0;\n      var hashPos = 0;\n      var proofPos = 0;\n\n      for (var i = 0; i < totalHashes; i++) {\n        var bufA = proofFlag[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proofs[proofPos++];\n        var bufB = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n        var buffers = [bufA, bufB].sort(Buffer.compare);\n        hashes[i] = this.hashFn(Buffer.concat(buffers));\n      }\n\n      return Buffer.compare(hashes[totalHashes - 1], root) === 0;\n    }\n  }, {\n    key: \"verifyMultiProofForUnevenTree\",\n    value: function verifyMultiProofForUnevenTree(root, indices, leaves, leavesCount, proof) {\n      var _this12 = this;\n\n      root = this.bufferify(root);\n      leaves = leaves.map(function (leaf) {\n        return _this12.bufferify(leaf);\n      });\n      proof = proof.map(function (leaf) {\n        return _this12.bufferify(leaf);\n      });\n      var computedRoot = this.calculateRootForUnevenTree(indices, leaves, leavesCount, proof);\n      return root.equals(computedRoot);\n    }\n    /**\n     * getDepth\n     * @desc Returns the tree depth (number of layers)\n     * @return {Number}\n     * @example\n     *```js\n     *const depth = tree.getDepth()\n     *```\n     */\n\n  }, {\n    key: \"getDepth\",\n    value: function getDepth() {\n      return this.getLayers().length - 1;\n    }\n    /**\n     * getLayersAsObject\n     * @desc Returns the layers as nested objects instead of an array.\n     * @example\n     *```js\n     *const layersObj = tree.getLayersAsObject()\n     *```\n     */\n\n  }, {\n    key: \"getLayersAsObject\",\n    value: function getLayersAsObject() {\n      var _this13 = this;\n\n      var layers = this.getLayers().map(function (layer) {\n        return layer.map(function (value) {\n          return _this13.bufferToHex(value, false);\n        });\n      });\n      var objs = [];\n\n      for (var i = 0; i < layers.length; i++) {\n        var arr = [];\n\n        for (var j = 0; j < layers[i].length; j++) {\n          var obj = _defineProperty({}, layers[i][j], null);\n\n          if (objs.length) {\n            obj[layers[i][j]] = {};\n            var a = objs.shift();\n            var akey = Object.keys(a)[0];\n            obj[layers[i][j]][akey] = a[akey];\n\n            if (objs.length) {\n              var b = objs.shift();\n              var bkey = Object.keys(b)[0];\n              obj[layers[i][j]][bkey] = b[bkey];\n            }\n          }\n\n          arr.push(obj);\n        }\n\n        objs.push.apply(objs, arr);\n      }\n\n      return objs[0];\n    }\n    /**\n     * verify\n     * @desc Returns true if the proof path (array of hashes) can connect the target node\n     * to the Merkle root.\n     * @param {Object[]} proof - Array of proof objects that should connect\n     * target node to Merkle root.\n     * @param {Buffer} targetNode - Target node Buffer\n     * @param {Buffer} root - Merkle root Buffer\n     * @param {Function} hashFunction - Hash function for hashing leaves and nodes\n     * @param {Object} options - Additional options\n     * @return {Boolean}\n     * @example\n     *```js\n     *const verified = MerkleTree.verify(proof, leaf, root, sha256, options)\n     *```\n     */\n\n  }, {\n    key: \"resetTree\",\n    value:\n    /**\n     * resetTree\n     * @desc Resets the tree by clearing the leaves and layers.\n     * @example\n     *```js\n     *tree.resetTree()\n     *```\n     */\n    function resetTree() {\n      this.leaves = [];\n      this.layers = [];\n    }\n    /**\n     * getPairNode\n     * @desc Returns the node at the index for given layer.\n     * @param {Buffer[]} layer - Tree layer\n     * @param {Number} index - Index at layer.\n     * @return {Buffer} - Node\n     *\n     *@example\n     * ```js\n     *const node = tree.getPairNode(layer, index)\n     *```\n     */\n\n  }, {\n    key: \"_getPairNode\",\n    value: function _getPairNode(layer, idx) {\n      var pairIdx = idx % 2 === 0 ? idx + 1 : idx - 1;\n\n      if (pairIdx < layer.length) {\n        return layer[pairIdx];\n      } else {\n        return null;\n      }\n    }\n    /**\n     * toTreeString\n     * @desc Returns a visual representation of the merkle tree as a string.\n     * @return {String}\n     * @example\n     *```js\n     *console.log(tree.toTreeString())\n     *```\n     */\n\n  }, {\n    key: \"_toTreeString\",\n    value: function _toTreeString() {\n      var obj = this.getLayersAsObject();\n      return treeify_1.default.asTree(obj, true);\n    }\n    /**\n     * toString\n     * @desc Returns a visual representation of the merkle tree as a string.\n     * @example\n     *```js\n     *console.log(tree.toString())\n     *```\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this._toTreeString();\n    }\n  }, {\n    key: \"isUnevenTree\",\n    value: function isUnevenTree(treeLayers) {\n      var depth = (treeLayers === null || treeLayers === void 0 ? void 0 : treeLayers.length) || this.getDepth();\n      return !this.isPowOf2(depth);\n    }\n  }, {\n    key: \"isPowOf2\",\n    value: function isPowOf2(v) {\n      return v && !(v & v - 1);\n    }\n  }, {\n    key: \"calculateRootForUnevenTree\",\n    value: function calculateRootForUnevenTree(leafIndices, leafHashes, totalLeavesCount, proofHashes) {\n      var leafTuples = this._zip(leafIndices, leafHashes).sort(function (_ref2, _ref3) {\n        var _ref4 = _slicedToArray(_ref2, 1),\n            indexA = _ref4[0];\n\n        var _ref5 = _slicedToArray(_ref3, 1),\n            indexB = _ref5[0];\n\n        return indexA - indexB;\n      });\n\n      var leafTupleIndices = leafTuples.map(function (_ref6) {\n        var _ref7 = _slicedToArray(_ref6, 1),\n            index = _ref7[0];\n\n        return index;\n      });\n      var proofIndices = this.getProofIndicesForUnevenTree(leafTupleIndices, totalLeavesCount);\n      var nextSliceStart = 0;\n      var proofTuplesByLayers = [];\n\n      for (var i = 0; i < proofIndices.length; i++) {\n        var indices = proofIndices[i];\n        var sliceStart = nextSliceStart;\n        nextSliceStart += indices.length;\n        proofTuplesByLayers[i] = this._zip(indices, proofHashes.slice(sliceStart, nextSliceStart));\n      }\n\n      var tree = [leafTuples];\n\n      for (var layerIndex = 0; layerIndex < proofTuplesByLayers.length; layerIndex++) {\n        var currentLayer = proofTuplesByLayers[layerIndex].concat(tree[layerIndex]).sort(function (_ref8, _ref9) {\n          var _ref10 = _slicedToArray(_ref8, 1),\n              indexA = _ref10[0];\n\n          var _ref11 = _slicedToArray(_ref9, 1),\n              indexB = _ref11[0];\n\n          return indexA - indexB;\n        }).map(function (_ref12) {\n          var _ref13 = _slicedToArray(_ref12, 2),\n              hash = _ref13[1];\n\n          return hash;\n        });\n        var s = tree[layerIndex].map(function (_ref14) {\n          var _ref15 = _slicedToArray(_ref14, 1),\n              layerIndex = _ref15[0];\n\n          return layerIndex;\n        });\n\n        var parentIndices = _toConsumableArray(new Set(s.map(function (index) {\n          if (index % 2 === 0) {\n            return index / 2;\n          }\n\n          if (index % 2 === 0) {\n            return (index + 1) / 2;\n          }\n\n          return (index - 1) / 2;\n        })));\n\n        var parentLayer = [];\n\n        for (var _i2 = 0; _i2 < parentIndices.length; _i2++) {\n          var parentNodeTreeIndex = parentIndices[_i2];\n          var bufA = currentLayer[_i2 * 2];\n          var bufB = currentLayer[_i2 * 2 + 1];\n          var hash = bufB ? this.hashFn(Buffer.concat([bufA, bufB])) : bufA;\n          parentLayer.push([parentNodeTreeIndex, hash]);\n        }\n\n        tree.push(parentLayer);\n      }\n\n      return tree[tree.length - 1][0][1];\n    }\n  }], [{\n    key: \"marshalLeaves\",\n    value: function marshalLeaves(leaves) {\n      return JSON.stringify(leaves.map(function (leaf) {\n        return MerkleTree.bufferToHex(leaf);\n      }), null, 2);\n    }\n    /**\n     * unmarshalLeaves\n     * @desc Returns array of leaves of Merkle Tree as a Buffers.\n     * @param {String|Object} - JSON stringified leaves\n     * @return {Buffer[]} - Unmarshalled list of leaves\n     * @example\n     *```js\n     *const leaves = MerkleTree.unmarshalLeaves(jsonStr)\n     *```\n     */\n\n  }, {\n    key: \"unmarshalLeaves\",\n    value: function unmarshalLeaves(jsonStr) {\n      var parsed = null;\n\n      if (typeof jsonStr === 'string') {\n        parsed = JSON.parse(jsonStr);\n      } else if (jsonStr instanceof Object) {\n        parsed = jsonStr;\n      } else {\n        throw new Error('Expected type of string or object');\n      }\n\n      if (!parsed) {\n        return [];\n      }\n\n      if (!Array.isArray(parsed)) {\n        throw new Error('Expected JSON string to be array');\n      }\n\n      return parsed.map(MerkleTree.bufferify);\n    }\n  }, {\n    key: \"marshalProof\",\n    value: function marshalProof(proof) {\n      var json = proof.map(function (item) {\n        if (typeof item === 'string') {\n          return item;\n        }\n\n        if (Buffer.isBuffer(item)) {\n          return MerkleTree.bufferToHex(item);\n        }\n\n        return {\n          position: item.position,\n          data: MerkleTree.bufferToHex(item.data)\n        };\n      });\n      return JSON.stringify(json, null, 2);\n    }\n    /**\n     * unmarshalProof\n     * @desc Returns the proof for a target leaf as a list of Buffers.\n     * @param {String|Object} - Merkle tree leaves\n     * @return {String|Object} - Marshalled proof\n     * @example\n     * ```js\n     *const proof = MerkleTree.unmarshalProof(jsonStr)\n     *```\n     */\n\n  }, {\n    key: \"unmarshalProof\",\n    value: function unmarshalProof(jsonStr) {\n      var parsed = null;\n\n      if (typeof jsonStr === 'string') {\n        parsed = JSON.parse(jsonStr);\n      } else if (jsonStr instanceof Object) {\n        parsed = jsonStr;\n      } else {\n        throw new Error('Expected type of string or object');\n      }\n\n      if (!parsed) {\n        return [];\n      }\n\n      if (!Array.isArray(parsed)) {\n        throw new Error('Expected JSON string to be array');\n      }\n\n      return parsed.map(function (item) {\n        if (typeof item === 'string') {\n          return MerkleTree.bufferify(item);\n        } else if (item instanceof Object) {\n          return {\n            position: item.position,\n            data: MerkleTree.bufferify(item.data)\n          };\n        } else {\n          throw new Error('Expected item to be of type string or object');\n        }\n      });\n    }\n  }, {\n    key: \"verify\",\n    value: function verify(proof, targetNode, root) {\n      var hashFn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : sha256_1.default;\n      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      var tree = new MerkleTree([], hashFn, options);\n      return tree.verify(proof, targetNode, root);\n    }\n    /**\n     * getMultiProof\n     * @desc Returns the multiproof for given tree indices.\n     * @param {Buffer[]} tree - Tree as a flat array.\n     * @param {Number[]} indices - Tree indices.\n     * @return {Buffer[]} - Multiproofs\n     *\n     *@example\n     * ```js\n     *const flatTree = tree.getLayersFlat()\n     *const indices = [2, 5, 6]\n     *const proof = MerkleTree.getMultiProof(flatTree, indices)\n     *```\n     */\n\n  }, {\n    key: \"getMultiProof\",\n    value: function getMultiProof(tree, indices) {\n      var t = new MerkleTree([]);\n      return t.getMultiProof(tree, indices);\n    }\n  }]);\n\n  return MerkleTree;\n}(Base_1.default);\n\nexports.MerkleTree = MerkleTree;\n\nif (typeof window !== 'undefined') {\n  ;\n  window.MerkleTree = MerkleTree;\n}\n\nexports.default = MerkleTree;","map":{"version":3,"sources":["/Users/mohammedchoudhury/Documents/Coding/Crypto/NFTS/cozy camp/minting/node_modules/merkletreejs/dist/MerkleTree.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","MerkleTree","buffer_reverse_1","require","sha256_1","Base_1","treeify_1","leaves","hashFn","default","options","duplicateOdd","hashLeaves","isBitcoinTree","layers","sortLeaves","sortPairs","sort","fillDefaultHash","Buffer","isBuffer","idx","Error","bufferifyFn","processLeaves","map","bufferify","compare","i","Math","pow","ceil","log2","length","push","_createHashes","nodes","layerIndex","data","hash","concat","left","right","combined","leaf","shouldHash","values","Array","isArray","filter","_bufferIndexOf","index","from","target","getLeaves","equals","bufferToHex","reduce","acc","item","layer","unshift","getLayersFlat","getLayers","getRoot","proof","Number","isInteger","isRightNode","pairIndex","position","getProof","treeIndices","depth","leafCount","maximalIndices","Set","x","add","a","b","reverse","redundantIndices","has","includes","sortedLeafIndices","leavesCount","unevenLayers","unevenLayer","proofIndices","layerNodes","siblingIndices","proofNodeIndices","find","slice","tree","indices","isUneven","isUnevenTree","every","getMultiProofForUnevenTree","els","ids","el","hashes","nextIds","j","pairElement","_getPairNode","self","indexOf","getProofIndices","_log2","proofHashes","currentLayerIndices","treeLayer","siblings","uniqueIndices","getMultiProof","proofs","_proofs","tested","flags","skipped","proofUsed","targetNode","root","node","isLeftNode","buffers","proofLeaves","verifyMultiProofForUnevenTree","_zip","proofitem","indexqueue","keys","hasOwnProperty","call","pair","proofFlag","leavesLen","totalHashes","leafPos","hashPos","proofPos","bufA","bufB","computedRoot","calculateRootForUnevenTree","objs","arr","obj","shift","akey","bkey","pairIdx","getLayersAsObject","asTree","_toTreeString","treeLayers","getDepth","isPowOf2","v","leafIndices","leafHashes","totalLeavesCount","leafTuples","indexA","indexB","leafTupleIndices","getProofIndicesForUnevenTree","nextSliceStart","proofTuplesByLayers","sliceStart","currentLayer","s","parentIndices","parentLayer","parentNodeTreeIndex","JSON","stringify","jsonStr","parsed","parse","json","verify","t","window"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MerkleTree = void 0;\nconst buffer_reverse_1 = __importDefault(require(\"buffer-reverse\"));\nconst sha256_1 = __importDefault(require(\"crypto-js/sha256\"));\nconst Base_1 = __importDefault(require(\"./Base\"));\nconst treeify_1 = __importDefault(require(\"treeify\"));\n/**\n * Class reprensenting a Merkle Tree\n * @namespace MerkleTree\n */\nclass MerkleTree extends Base_1.default {\n    /**\n     * @desc Constructs a Merkle Tree.\n     * All nodes and leaves are stored as Buffers.\n     * Lonely leaf nodes are promoted to the next level up without being hashed again.\n     * @param {Buffer[]} leaves - Array of hashed leaves. Each leaf must be a Buffer.\n     * @param {Function} hashFunction - Hash function to use for hashing leaves and nodes\n     * @param {Object} options - Additional options\n     * @example\n     *```js\n     *const MerkleTree = require('merkletreejs')\n     *const crypto = require('crypto')\n     *\n     *function sha256(data) {\n     *  // returns Buffer\n     *  return crypto.createHash('sha256').update(data).digest()\n     *}\n     *\n     *const leaves = ['a', 'b', 'c'].map(value => keccak(value))\n     *\n     *const tree = new MerkleTree(leaves, sha256)\n     *```\n     */\n    constructor(leaves, hashFn = sha256_1.default, options = {}) {\n        super();\n        this.duplicateOdd = false;\n        this.hashLeaves = false;\n        this.isBitcoinTree = false;\n        this.leaves = [];\n        this.layers = [];\n        this.sortLeaves = false;\n        this.sortPairs = false;\n        this.sort = false;\n        this.fillDefaultHash = null;\n        this.isBitcoinTree = !!options.isBitcoinTree;\n        this.hashLeaves = !!options.hashLeaves;\n        this.sortLeaves = !!options.sortLeaves;\n        this.sortPairs = !!options.sortPairs;\n        if (options.fillDefaultHash) {\n            if (typeof options.fillDefaultHash === 'function') {\n                this.fillDefaultHash = options.fillDefaultHash;\n            }\n            else if (Buffer.isBuffer(options.fillDefaultHash) || typeof options.fillDefaultHash === 'string') {\n                this.fillDefaultHash = (idx, hashFn) => options.fillDefaultHash;\n            }\n            else {\n                throw new Error('method \"fillDefaultHash\" must be a function, Buffer, or string');\n            }\n        }\n        this.sort = !!options.sort;\n        if (this.sort) {\n            this.sortLeaves = true;\n            this.sortPairs = true;\n        }\n        this.duplicateOdd = !!options.duplicateOdd;\n        this.hashFn = this.bufferifyFn(hashFn);\n        this.processLeaves(leaves);\n    }\n    processLeaves(leaves) {\n        if (this.hashLeaves) {\n            leaves = leaves.map(this.hashFn);\n        }\n        this.leaves = leaves.map(this.bufferify);\n        if (this.sortLeaves) {\n            this.leaves = this.leaves.sort(Buffer.compare);\n        }\n        if (this.fillDefaultHash) {\n            for (let i = 0; i < Math.pow(2, Math.ceil(Math.log2(this.leaves.length))); i++) {\n                if (i >= this.leaves.length) {\n                    this.leaves.push(this.bufferify(this.fillDefaultHash(i, this.hashFn)));\n                }\n            }\n        }\n        this.layers = [this.leaves];\n        this._createHashes(this.leaves);\n    }\n    _createHashes(nodes) {\n        while (nodes.length > 1) {\n            const layerIndex = this.layers.length;\n            this.layers.push([]);\n            for (let i = 0; i < nodes.length; i += 2) {\n                if (i + 1 === nodes.length) {\n                    if (nodes.length % 2 === 1) {\n                        let data = nodes[nodes.length - 1];\n                        let hash = data;\n                        // is bitcoin tree\n                        if (this.isBitcoinTree) {\n                            // Bitcoin method of duplicating the odd ending nodes\n                            data = Buffer.concat([buffer_reverse_1.default(data), buffer_reverse_1.default(data)]);\n                            hash = this.hashFn(data);\n                            hash = buffer_reverse_1.default(this.hashFn(hash));\n                            this.layers[layerIndex].push(hash);\n                            continue;\n                        }\n                        else {\n                            if (this.duplicateOdd) {\n                                // continue with creating layer\n                            }\n                            else {\n                                // push copy of hash and continue iteration\n                                this.layers[layerIndex].push(nodes[i]);\n                                continue;\n                            }\n                        }\n                    }\n                }\n                const left = nodes[i];\n                const right = i + 1 === nodes.length ? left : nodes[i + 1];\n                let data = null;\n                let combined = null;\n                if (this.isBitcoinTree) {\n                    combined = [buffer_reverse_1.default(left), buffer_reverse_1.default(right)];\n                }\n                else {\n                    combined = [left, right];\n                }\n                if (this.sortPairs) {\n                    combined.sort(Buffer.compare);\n                }\n                data = Buffer.concat(combined);\n                let hash = this.hashFn(data);\n                // double hash if bitcoin tree\n                if (this.isBitcoinTree) {\n                    hash = buffer_reverse_1.default(this.hashFn(hash));\n                }\n                this.layers[layerIndex].push(hash);\n            }\n            nodes = this.layers[layerIndex];\n        }\n    }\n    /**\n     * addLeaf\n     * @desc Adds a leaf to the tree and re-calculates layers.\n     * @param {String|Buffer} - Leaf\n     * @param {Boolean} - Set to true if the leaf should be hashed before being added to tree.\n     * @example\n     *```js\n     *tree.addLeaf(newLeaf)\n     *```\n     */\n    addLeaf(leaf, shouldHash = false) {\n        if (shouldHash) {\n            leaf = this.hashFn(leaf);\n        }\n        this.processLeaves(this.leaves.concat(leaf));\n    }\n    /**\n     * addLeaves\n     * @desc Adds multiple leaves to the tree and re-calculates layers.\n     * @param {String[]|Buffer[]} - Array of leaves\n     * @param {Boolean} - Set to true if the leaves should be hashed before being added to tree.\n     * @example\n     *```js\n     *tree.addLeaves(newLeaves)\n     *```\n     */\n    addLeaves(leaves, shouldHash = false) {\n        if (shouldHash) {\n            leaves = leaves.map(this.hashFn);\n        }\n        this.processLeaves(this.leaves.concat(leaves));\n    }\n    /**\n     * getLeaves\n     * @desc Returns array of leaves of Merkle Tree.\n     * @return {Buffer[]}\n     * @example\n     *```js\n     *const leaves = tree.getLeaves()\n     *```\n     */\n    getLeaves(values) {\n        if (Array.isArray(values)) {\n            if (this.hashLeaves) {\n                values = values.map(this.hashFn);\n                if (this.sortLeaves) {\n                    values = values.sort(Buffer.compare);\n                }\n            }\n            return this.leaves.filter(leaf => this._bufferIndexOf(values, leaf) !== -1);\n        }\n        return this.leaves;\n    }\n    /**\n     * getLeaf\n     * @desc Returns the leaf at the given index.\n     * @param {Number} - Index number\n     * @return {Buffer}\n     * @example\n     *```js\n     *const leaf = tree.getLeaf(1)\n     *```\n     */\n    getLeaf(index) {\n        if (index < 0 || index > this.leaves.length - 1) {\n            return Buffer.from([]);\n        }\n        return this.leaves[index];\n    }\n    /**\n     * getLeafIndex\n     * @desc Returns the index of the given leaf, or -1 if the leaf is not found.\n     * @param {String|Buffer} - Target leaf\n     * @return {number}\n     * @example\n     *```js\n     *const leaf = Buffer.from('abc')\n     *const index = tree.getLeafIndex(leaf)\n     *```\n     */\n    getLeafIndex(target) {\n        target = this.bufferify(target);\n        const leaves = this.getLeaves();\n        for (let i = 0; i < leaves.length; i++) {\n            const leaf = leaves[i];\n            if (leaf.equals(target)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n     * getLeafCount\n     * @desc Returns the total number of leaves.\n     * @return {number}\n     * @example\n     *```js\n     *const count = tree.getLeafCount()\n     *```\n     */\n    getLeafCount() {\n        return this.leaves.length;\n    }\n    /**\n     * getHexLeaves\n     * @desc Returns array of leaves of Merkle Tree as hex strings.\n     * @return {String[]}\n     * @example\n     *```js\n     *const leaves = tree.getHexLeaves()\n     *```\n     */\n    getHexLeaves() {\n        return this.leaves.map(leaf => this.bufferToHex(leaf));\n    }\n    /**\n     * marshalLeaves\n     * @desc Returns array of leaves of Merkle Tree as a JSON string.\n     * @param {String[]|Buffer[]} - Merkle tree leaves\n     * @return {String} - List of leaves as JSON string\n     * @example\n     *```js\n     *const jsonStr = MerkleTree.marshalLeaves(leaves)\n     *```\n     */\n    static marshalLeaves(leaves) {\n        return JSON.stringify(leaves.map(leaf => MerkleTree.bufferToHex(leaf)), null, 2);\n    }\n    /**\n     * unmarshalLeaves\n     * @desc Returns array of leaves of Merkle Tree as a Buffers.\n     * @param {String|Object} - JSON stringified leaves\n     * @return {Buffer[]} - Unmarshalled list of leaves\n     * @example\n     *```js\n     *const leaves = MerkleTree.unmarshalLeaves(jsonStr)\n     *```\n     */\n    static unmarshalLeaves(jsonStr) {\n        let parsed = null;\n        if (typeof jsonStr === 'string') {\n            parsed = JSON.parse(jsonStr);\n        }\n        else if (jsonStr instanceof Object) {\n            parsed = jsonStr;\n        }\n        else {\n            throw new Error('Expected type of string or object');\n        }\n        if (!parsed) {\n            return [];\n        }\n        if (!Array.isArray(parsed)) {\n            throw new Error('Expected JSON string to be array');\n        }\n        return parsed.map(MerkleTree.bufferify);\n    }\n    /**\n     * getLayers\n     * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root.\n     * @return {Buffer[]}\n     * @example\n     *```js\n     *const layers = tree.getLayers()\n     *```\n     */\n    getLayers() {\n        return this.layers;\n    }\n    /**\n     * getHexLayers\n     * @desc Returns multi-dimensional array of all layers of Merkle Tree, including leaves and root as hex strings.\n     * @return {String[]}\n     * @example\n     *```js\n     *const layers = tree.getHexLayers()\n     *```\n     */\n    getHexLayers() {\n        return this.layers.reduce((acc, item) => {\n            if (Array.isArray(item)) {\n                acc.push(item.map(layer => this.bufferToHex(layer)));\n            }\n            else {\n                acc.push(item);\n            }\n            return acc;\n        }, []);\n    }\n    /**\n     * getLayersFlat\n     * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root.\n     * @return {Buffer[]}\n     * @example\n     *```js\n     *const layers = tree.getLayersFlat()\n     *```\n     */\n    getLayersFlat() {\n        const layers = this.layers.reduce((acc, item) => {\n            if (Array.isArray(item)) {\n                acc.unshift(...item);\n            }\n            else {\n                acc.unshift(item);\n            }\n            return acc;\n        }, []);\n        layers.unshift(Buffer.from([0]));\n        return layers;\n    }\n    /**\n     * getHexLayersFlat\n     * @desc Returns single flat array of all layers of Merkle Tree, including leaves and root as hex string.\n     * @return {String[]}\n     * @example\n     *```js\n     *const layers = tree.getHexLayersFlat()\n     *```\n     */\n    getHexLayersFlat() {\n        return this.getLayersFlat().map(layer => this.bufferToHex(layer));\n    }\n    /**\n     * getLayerCount\n     * @desc Returns the total number of layers.\n     * @return {number}\n     * @example\n     *```js\n     *const count = tree.getLayerCount()\n     *```\n     */\n    getLayerCount() {\n        return this.getLayers().length;\n    }\n    /**\n     * getRoot\n     * @desc Returns the Merkle root hash as a Buffer.\n     * @return {Buffer}\n     * @example\n     *```js\n     *const root = tree.getRoot()\n     *```\n     */\n    getRoot() {\n        if (this.layers.length === 0) {\n            return Buffer.from([]);\n        }\n        return this.layers[this.layers.length - 1][0] || Buffer.from([]);\n    }\n    /**\n     * getHexRoot\n     * @desc Returns the Merkle root hash as a hex string.\n     * @return {String}\n     * @example\n     *```js\n     *const root = tree.getHexRoot()\n     *```\n     */\n    getHexRoot() {\n        return this.bufferToHex(this.getRoot());\n    }\n    /**\n     * getProof\n     * @desc Returns the proof for a target leaf.\n     * @param {Buffer} leaf - Target leaf\n     * @param {Number} [index] - Target leaf index in leaves array.\n     * Use if there are leaves containing duplicate data in order to distinguish it.\n     * @return {Object[]} - Array of objects containing a position property of type string\n     * with values of 'left' or 'right' and a data property of type Buffer.\n     * @example\n     * ```js\n     *const proof = tree.getProof(leaves[2])\n     *```\n     *\n     * @example\n     *```js\n     *const leaves = ['a', 'b', 'a'].map(value => keccak(value))\n     *const tree = new MerkleTree(leaves, keccak)\n     *const proof = tree.getProof(leaves[2], 2)\n     *```\n     */\n    getProof(leaf, index) {\n        if (typeof leaf === 'undefined') {\n            throw new Error('leaf is required');\n        }\n        leaf = this.bufferify(leaf);\n        const proof = [];\n        if (!Number.isInteger(index)) {\n            index = -1;\n            for (let i = 0; i < this.leaves.length; i++) {\n                if (Buffer.compare(leaf, this.leaves[i]) === 0) {\n                    index = i;\n                }\n            }\n        }\n        if (index <= -1) {\n            return [];\n        }\n        for (let i = 0; i < this.layers.length; i++) {\n            const layer = this.layers[i];\n            const isRightNode = index % 2;\n            const pairIndex = (isRightNode ? index - 1\n                : this.isBitcoinTree && index === layer.length - 1 && i < this.layers.length - 1\n                    // Proof Generation for Bitcoin Trees\n                    ? index\n                    // Proof Generation for Non-Bitcoin Trees\n                    : index + 1);\n            if (pairIndex < layer.length) {\n                proof.push({\n                    position: isRightNode ? 'left' : 'right',\n                    data: layer[pairIndex]\n                });\n            }\n            // set index to parent index\n            index = (index / 2) | 0;\n        }\n        return proof;\n    }\n    /**\n     * getHexProof\n     * @desc Returns the proof for a target leaf as hex strings.\n     * @param {Buffer} leaf - Target leaf\n     * @param {Number} [index] - Target leaf index in leaves array.\n     * Use if there are leaves containing duplicate data in order to distinguish it.\n     * @return {String[]} - Proof array as hex strings.\n     * @example\n     * ```js\n     *const proof = tree.getHexProof(leaves[2])\n     *```\n     */\n    getHexProof(leaf, index) {\n        return this.getProof(leaf, index).map(item => this.bufferToHex(item.data));\n    }\n    /**\n    * getPositionalHexProof\n    * @desc Returns the proof for a target leaf as hex strings and the position in binary (left == 0).\n    * @param {Buffer} leaf - Target leaf\n    * @param {Number} [index] - Target leaf index in leaves array.\n    * Use if there are leaves containing duplicate data in order to distinguish it.\n    * @return {(string | number)[][]} - Proof array as hex strings. position at index 0\n    * @example\n    * ```js\n    *const proof = tree.getPositionalHexProof(leaves[2])\n    *```\n    */\n    getPositionalHexProof(leaf, index) {\n        return this.getProof(leaf, index).map(item => {\n            return [\n                item.position === 'left' ? 0 : 1,\n                this.bufferToHex(item.data)\n            ];\n        });\n    }\n    /**\n     * marshalProof\n     * @desc Returns proof array as JSON string.\n     * @param {String[]|Object[]} proof - Merkle tree proof array\n     * @return {String} - Proof array as JSON string.\n     * @example\n     * ```js\n     *const jsonStr = MerkleTree.marshalProof(proof)\n     *```\n     */\n    static marshalProof(proof) {\n        const json = proof.map(item => {\n            if (typeof item === 'string') {\n                return item;\n            }\n            if (Buffer.isBuffer(item)) {\n                return MerkleTree.bufferToHex(item);\n            }\n            return {\n                position: item.position,\n                data: MerkleTree.bufferToHex(item.data)\n            };\n        });\n        return JSON.stringify(json, null, 2);\n    }\n    /**\n     * unmarshalProof\n     * @desc Returns the proof for a target leaf as a list of Buffers.\n     * @param {String|Object} - Merkle tree leaves\n     * @return {String|Object} - Marshalled proof\n     * @example\n     * ```js\n     *const proof = MerkleTree.unmarshalProof(jsonStr)\n     *```\n     */\n    static unmarshalProof(jsonStr) {\n        let parsed = null;\n        if (typeof jsonStr === 'string') {\n            parsed = JSON.parse(jsonStr);\n        }\n        else if (jsonStr instanceof Object) {\n            parsed = jsonStr;\n        }\n        else {\n            throw new Error('Expected type of string or object');\n        }\n        if (!parsed) {\n            return [];\n        }\n        if (!Array.isArray(parsed)) {\n            throw new Error('Expected JSON string to be array');\n        }\n        return parsed.map(item => {\n            if (typeof item === 'string') {\n                return MerkleTree.bufferify(item);\n            }\n            else if (item instanceof Object) {\n                return {\n                    position: item.position,\n                    data: MerkleTree.bufferify(item.data)\n                };\n            }\n            else {\n                throw new Error('Expected item to be of type string or object');\n            }\n        });\n    }\n    /**\n     * getProofIndices\n     * @desc Returns the proof indices for given tree indices.\n     * @param {Number[]} treeIndices - Tree indices\n     * @param {Number} depth - Tree depth; number of layers.\n     * @return {Number[]} - Proof indices\n     * @example\n     * ```js\n     *const proofIndices = tree.getProofIndices([2,5,6], 4)\n     *console.log(proofIndices) // [ 23, 20, 19, 8, 3 ]\n     *```\n     */\n    getProofIndices(treeIndices, depth) {\n        const leafCount = Math.pow(2, depth);\n        let maximalIndices = new Set();\n        for (const index of treeIndices) {\n            let x = leafCount + index;\n            while (x > 1) {\n                maximalIndices.add(x ^ 1);\n                x = (x / 2) | 0;\n            }\n        }\n        const a = treeIndices.map(index => leafCount + index);\n        const b = Array.from(maximalIndices).sort((a, b) => a - b).reverse();\n        maximalIndices = a.concat(b);\n        const redundantIndices = new Set();\n        const proof = [];\n        for (let index of maximalIndices) {\n            if (!redundantIndices.has(index)) {\n                proof.push(index);\n                while (index > 1) {\n                    redundantIndices.add(index);\n                    if (!redundantIndices.has(index ^ 1))\n                        break;\n                    index = (index / 2) | 0;\n                }\n            }\n        }\n        return proof.filter(index => {\n            return !treeIndices.includes(index - leafCount);\n        });\n    }\n    getProofIndicesForUnevenTree(sortedLeafIndices, leavesCount) {\n        const depth = Math.ceil(Math.log2(leavesCount));\n        const unevenLayers = [];\n        for (let index = 0; index < depth; index++) {\n            const unevenLayer = leavesCount % 2 !== 0;\n            if (unevenLayer) {\n                unevenLayers.push({ index, leavesCount });\n            }\n            leavesCount = Math.ceil(leavesCount / 2);\n        }\n        const proofIndices = [];\n        let layerNodes = sortedLeafIndices;\n        for (let layerIndex = 0; layerIndex < depth; layerIndex++) {\n            const siblingIndices = layerNodes.map((index) => {\n                if (index % 2 === 0) {\n                    return index + 1;\n                }\n                return index - 1;\n            });\n            let proofNodeIndices = siblingIndices.filter((index) => !layerNodes.includes(index));\n            const unevenLayer = unevenLayers.find(({ index }) => index === layerIndex);\n            if (unevenLayer && layerNodes.includes(unevenLayer.leavesCount - 1)) {\n                proofNodeIndices = proofNodeIndices.slice(0, -1);\n            }\n            proofIndices.push(proofNodeIndices);\n            layerNodes = [...new Set(layerNodes.map((index) => {\n                    if (index % 2 === 0) {\n                        return index / 2;\n                    }\n                    if (index % 2 === 0) {\n                        return (index + 1) / 2;\n                    }\n                    return (index - 1) / 2;\n                }))];\n        }\n        return proofIndices;\n    }\n    /**\n     * getMultiProof\n     * @desc Returns the multiproof for given tree indices.\n     * @param {Number[]} indices - Tree indices.\n     * @return {Buffer[]} - Multiproofs\n     * @example\n     * ```js\n     *const indices = [2, 5, 6]\n     *const proof = tree.getMultiProof(indices)\n     *```\n     */\n    getMultiProof(tree, indices) {\n        if (!indices) {\n            indices = tree;\n            tree = this.getLayersFlat();\n        }\n        const isUneven = this.isUnevenTree();\n        if (isUneven) {\n            if (indices.every(Number.isInteger)) {\n                return this.getMultiProofForUnevenTree(indices);\n            }\n        }\n        if (!indices.every(Number.isInteger)) {\n            let els = indices;\n            if (this.sortPairs) {\n                els = els.sort(Buffer.compare);\n            }\n            let ids = els.map((el) => this._bufferIndexOf(this.leaves, el)).sort((a, b) => a === b ? 0 : a > b ? 1 : -1);\n            if (!ids.every((idx) => idx !== -1)) {\n                throw new Error('Element does not exist in Merkle tree');\n            }\n            const hashes = [];\n            const proof = [];\n            let nextIds = [];\n            for (let i = 0; i < this.layers.length; i++) {\n                const layer = this.layers[i];\n                for (let j = 0; j < ids.length; j++) {\n                    const idx = ids[j];\n                    const pairElement = this._getPairNode(layer, idx);\n                    hashes.push(layer[idx]);\n                    if (pairElement) {\n                        proof.push(pairElement);\n                    }\n                    nextIds.push((idx / 2) | 0);\n                }\n                ids = nextIds.filter((value, i, self) => self.indexOf(value) === i);\n                nextIds = [];\n            }\n            return proof.filter((value) => !hashes.includes(value));\n        }\n        return this.getProofIndices(indices, this._log2((tree.length / 2) | 0)).map(index => tree[index]);\n    }\n    getMultiProofForUnevenTree(tree, indices) {\n        if (!indices) {\n            indices = tree;\n            tree = this.getLayers();\n        }\n        let proofHashes = [];\n        let currentLayerIndices = indices;\n        for (const treeLayer of tree) {\n            const siblings = [];\n            for (const index of currentLayerIndices) {\n                if (index % 2 === 0) {\n                    const idx = index + 1;\n                    if (!currentLayerIndices.includes(idx)) {\n                        if (treeLayer[idx]) {\n                            siblings.push(treeLayer[idx]);\n                            continue;\n                        }\n                    }\n                }\n                const idx = index - 1;\n                if (!currentLayerIndices.includes(idx)) {\n                    if (treeLayer[idx]) {\n                        siblings.push(treeLayer[idx]);\n                        continue;\n                    }\n                }\n            }\n            proofHashes = proofHashes.concat(siblings);\n            const uniqueIndices = new Set();\n            for (const index of currentLayerIndices) {\n                if (index % 2 === 0) {\n                    uniqueIndices.add(index / 2);\n                    continue;\n                }\n                if (index % 2 === 0) {\n                    uniqueIndices.add((index + 1) / 2);\n                    continue;\n                }\n                uniqueIndices.add((index - 1) / 2);\n            }\n            currentLayerIndices = Array.from(uniqueIndices);\n        }\n        return proofHashes;\n    }\n    /**\n     * getHexMultiProof\n     * @desc Returns the multiproof for given tree indices as hex strings.\n     * @param {Number[]} indices - Tree indices.\n     * @return {String[]} - Multiproofs as hex strings.\n     * @example\n     * ```js\n     *const indices = [2, 5, 6]\n     *const proof = tree.getHexMultiProof(indices)\n     *```\n     */\n    getHexMultiProof(tree, indices) {\n        return this.getMultiProof(tree, indices).map((x) => this.bufferToHex(x));\n    }\n    /**\n     * getProofFlags\n     * @desc Returns list of booleans where proofs should be used instead of hashing.\n     * Proof flags are used in the Solidity multiproof verifiers.\n     * @param {Number[]|Buffer[]} leaves\n     * @param {Buffer[]} proofs\n     * @return {Boolean[]} - Boolean flags\n     * @example\n     * ```js\n     *const indices = [2, 5, 6]\n     *const proof = tree.getMultiProof(indices)\n     *const proofFlags = tree.getProofFlags(leaves, proof)\n     *```\n     */\n    getProofFlags(leaves, proofs) {\n        if (!Array.isArray(leaves) || leaves.length <= 0) {\n            throw new Error('Invalid Inputs!');\n        }\n        let ids;\n        if (leaves.every(Number.isInteger)) {\n            ids = leaves.sort((a, b) => a === b ? 0 : a > b ? 1 : -1); // Indices where passed\n        }\n        else {\n            ids = leaves.map((el) => this._bufferIndexOf(this.leaves, el)).sort((a, b) => a === b ? 0 : a > b ? 1 : -1);\n        }\n        if (!ids.every((idx) => idx !== -1)) {\n            throw new Error('Element does not exist in Merkle tree');\n        }\n        const _proofs = proofs.map(item => this.bufferify(item));\n        const tested = [];\n        const flags = [];\n        for (let index = 0; index < this.layers.length; index++) {\n            const layer = this.layers[index];\n            ids = ids.reduce((ids, idx) => {\n                const skipped = tested.includes(layer[idx]);\n                if (!skipped) {\n                    const pairElement = this._getPairNode(layer, idx);\n                    const proofUsed = _proofs.includes(layer[idx]) || _proofs.includes(pairElement);\n                    pairElement && flags.push(!proofUsed);\n                    tested.push(layer[idx]);\n                    tested.push(pairElement);\n                }\n                ids.push((idx / 2) | 0);\n                return ids;\n            }, []);\n        }\n        return flags;\n    }\n    /**\n     * verify\n     * @desc Returns true if the proof path (array of hashes) can connect the target node\n     * to the Merkle root.\n     * @param {Object[]} proof - Array of proof objects that should connect\n     * target node to Merkle root.\n     * @param {Buffer} targetNode - Target node Buffer\n     * @param {Buffer} root - Merkle root Buffer\n     * @return {Boolean}\n     * @example\n     *```js\n     *const root = tree.getRoot()\n     *const proof = tree.getProof(leaves[2])\n     *const verified = tree.verify(proof, leaves[2], root)\n     *```\n     */\n    verify(proof, targetNode, root) {\n        let hash = this.bufferify(targetNode);\n        root = this.bufferify(root);\n        if (!Array.isArray(proof) ||\n            !targetNode ||\n            !root) {\n            return false;\n        }\n        for (let i = 0; i < proof.length; i++) {\n            const node = proof[i];\n            let data = null;\n            let isLeftNode = null;\n            // case for when proof is hex values only\n            if (typeof node === 'string') {\n                data = this.bufferify(node);\n                isLeftNode = true;\n            }\n            else if (Array.isArray(node)) {\n                isLeftNode = (node[0] === 0);\n                data = this.bufferify(node[1]);\n            }\n            else if (Buffer.isBuffer(node)) {\n                data = node;\n                isLeftNode = true;\n            }\n            else if (node instanceof Object) {\n                data = this.bufferify(node.data);\n                isLeftNode = (node.position === 'left');\n            }\n            else {\n                throw new Error('Expected node to be of type string or object');\n            }\n            const buffers = [];\n            if (this.isBitcoinTree) {\n                buffers.push(buffer_reverse_1.default(hash));\n                buffers[isLeftNode ? 'unshift' : 'push'](buffer_reverse_1.default(data));\n                hash = this.hashFn(Buffer.concat(buffers));\n                hash = buffer_reverse_1.default(this.hashFn(hash));\n            }\n            else {\n                if (this.sortPairs) {\n                    if (Buffer.compare(hash, data) === -1) {\n                        buffers.push(hash, data);\n                        hash = this.hashFn(Buffer.concat(buffers));\n                    }\n                    else {\n                        buffers.push(data, hash);\n                        hash = this.hashFn(Buffer.concat(buffers));\n                    }\n                }\n                else {\n                    buffers.push(hash);\n                    buffers[isLeftNode ? 'unshift' : 'push'](data);\n                    hash = this.hashFn(Buffer.concat(buffers));\n                }\n            }\n        }\n        return Buffer.compare(hash, root) === 0;\n    }\n    /**\n     * verifyMultiProof\n     * @desc Returns true if the multiproofs can connect the leaves to the Merkle root.\n     * @param {Buffer} root - Merkle tree root\n     * @param {Number[]} proofIndices - Leave indices for proof\n     * @param {Buffer[]} proofLeaves - Leaf values at indices for proof\n     * @param {Number} leavesCount - Count of original leaves\n     * @param {Buffer[]} proof - Multiproofs given indices\n     * @return {Boolean}\n     * @example\n     *```js\n     *const leaves = tree.getLeaves()\n     *const root = tree.getRoot()\n     *const treeFlat = tree.getLayersFlat()\n     *const leavesCount = leaves.length\n     *const proofIndices = [2, 5, 6]\n     *const proofLeaves = proofIndices.map(i => leaves[i])\n     *const proof = tree.getMultiProof(treeFlat, indices)\n     *const verified = tree.verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof)\n     *```\n     */\n    verifyMultiProof(root, proofIndices, proofLeaves, leavesCount, proof) {\n        const isUneven = this.isUnevenTree();\n        if (isUneven) {\n            // TODO: combine these functions and simplify\n            return this.verifyMultiProofForUnevenTree(root, proofIndices, proofLeaves, leavesCount, proof);\n        }\n        const depth = Math.ceil(Math.log2(leavesCount));\n        root = this.bufferify(root);\n        proofLeaves = proofLeaves.map(leaf => this.bufferify(leaf));\n        proof = proof.map(leaf => this.bufferify(leaf));\n        const tree = {};\n        for (const [index, leaf] of this._zip(proofIndices, proofLeaves)) {\n            tree[(Math.pow(2, depth)) + index] = leaf;\n        }\n        for (const [index, proofitem] of this._zip(this.getProofIndices(proofIndices, depth), proof)) {\n            tree[index] = proofitem;\n        }\n        let indexqueue = Object.keys(tree).map(value => +value).sort((a, b) => a - b);\n        indexqueue = indexqueue.slice(0, indexqueue.length - 1);\n        let i = 0;\n        while (i < indexqueue.length) {\n            const index = indexqueue[i];\n            if (index >= 2 && ({}).hasOwnProperty.call(tree, index ^ 1)) {\n                let pair = [tree[index - (index % 2)], tree[index - (index % 2) + 1]];\n                if (this.sortPairs) {\n                    pair = pair.sort(Buffer.compare);\n                }\n                const hash = pair[1] ? this.hashFn(Buffer.concat(pair)) : pair[0];\n                tree[(index / 2) | 0] = hash;\n                indexqueue.push((index / 2) | 0);\n            }\n            i += 1;\n        }\n        return !proofIndices.length || (({}).hasOwnProperty.call(tree, 1) && tree[1].equals(root));\n    }\n    verifyMultiProofWithFlags(root, leaves, proofs, proofFlag) {\n        root = this.bufferify(root);\n        leaves = leaves.map(this.bufferify);\n        proofs = proofs.map(this.bufferify);\n        const leavesLen = leaves.length;\n        const totalHashes = proofFlag.length;\n        const hashes = [];\n        let leafPos = 0;\n        let hashPos = 0;\n        let proofPos = 0;\n        for (let i = 0; i < totalHashes; i++) {\n            const bufA = proofFlag[i] ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++]) : proofs[proofPos++];\n            const bufB = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            const buffers = [bufA, bufB].sort(Buffer.compare);\n            hashes[i] = this.hashFn(Buffer.concat(buffers));\n        }\n        return Buffer.compare(hashes[totalHashes - 1], root) === 0;\n    }\n    verifyMultiProofForUnevenTree(root, indices, leaves, leavesCount, proof) {\n        root = this.bufferify(root);\n        leaves = leaves.map(leaf => this.bufferify(leaf));\n        proof = proof.map(leaf => this.bufferify(leaf));\n        const computedRoot = this.calculateRootForUnevenTree(indices, leaves, leavesCount, proof);\n        return root.equals(computedRoot);\n    }\n    /**\n     * getDepth\n     * @desc Returns the tree depth (number of layers)\n     * @return {Number}\n     * @example\n     *```js\n     *const depth = tree.getDepth()\n     *```\n     */\n    getDepth() {\n        return this.getLayers().length - 1;\n    }\n    /**\n     * getLayersAsObject\n     * @desc Returns the layers as nested objects instead of an array.\n     * @example\n     *```js\n     *const layersObj = tree.getLayersAsObject()\n     *```\n     */\n    getLayersAsObject() {\n        const layers = this.getLayers().map((layer) => layer.map((value) => this.bufferToHex(value, false)));\n        const objs = [];\n        for (let i = 0; i < layers.length; i++) {\n            const arr = [];\n            for (let j = 0; j < layers[i].length; j++) {\n                const obj = { [layers[i][j]]: null };\n                if (objs.length) {\n                    obj[layers[i][j]] = {};\n                    const a = objs.shift();\n                    const akey = Object.keys(a)[0];\n                    obj[layers[i][j]][akey] = a[akey];\n                    if (objs.length) {\n                        const b = objs.shift();\n                        const bkey = Object.keys(b)[0];\n                        obj[layers[i][j]][bkey] = b[bkey];\n                    }\n                }\n                arr.push(obj);\n            }\n            objs.push(...arr);\n        }\n        return objs[0];\n    }\n    /**\n     * verify\n     * @desc Returns true if the proof path (array of hashes) can connect the target node\n     * to the Merkle root.\n     * @param {Object[]} proof - Array of proof objects that should connect\n     * target node to Merkle root.\n     * @param {Buffer} targetNode - Target node Buffer\n     * @param {Buffer} root - Merkle root Buffer\n     * @param {Function} hashFunction - Hash function for hashing leaves and nodes\n     * @param {Object} options - Additional options\n     * @return {Boolean}\n     * @example\n     *```js\n     *const verified = MerkleTree.verify(proof, leaf, root, sha256, options)\n     *```\n     */\n    static verify(proof, targetNode, root, hashFn = sha256_1.default, options = {}) {\n        const tree = new MerkleTree([], hashFn, options);\n        return tree.verify(proof, targetNode, root);\n    }\n    /**\n     * getMultiProof\n     * @desc Returns the multiproof for given tree indices.\n     * @param {Buffer[]} tree - Tree as a flat array.\n     * @param {Number[]} indices - Tree indices.\n     * @return {Buffer[]} - Multiproofs\n     *\n     *@example\n     * ```js\n     *const flatTree = tree.getLayersFlat()\n     *const indices = [2, 5, 6]\n     *const proof = MerkleTree.getMultiProof(flatTree, indices)\n     *```\n     */\n    static getMultiProof(tree, indices) {\n        const t = new MerkleTree([]);\n        return t.getMultiProof(tree, indices);\n    }\n    /**\n     * resetTree\n     * @desc Resets the tree by clearing the leaves and layers.\n     * @example\n     *```js\n     *tree.resetTree()\n     *```\n     */\n    resetTree() {\n        this.leaves = [];\n        this.layers = [];\n    }\n    /**\n     * getPairNode\n     * @desc Returns the node at the index for given layer.\n     * @param {Buffer[]} layer - Tree layer\n     * @param {Number} index - Index at layer.\n     * @return {Buffer} - Node\n     *\n     *@example\n     * ```js\n     *const node = tree.getPairNode(layer, index)\n     *```\n     */\n    _getPairNode(layer, idx) {\n        const pairIdx = idx % 2 === 0 ? idx + 1 : idx - 1;\n        if (pairIdx < layer.length) {\n            return layer[pairIdx];\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * toTreeString\n     * @desc Returns a visual representation of the merkle tree as a string.\n     * @return {String}\n     * @example\n     *```js\n     *console.log(tree.toTreeString())\n     *```\n     */\n    _toTreeString() {\n        const obj = this.getLayersAsObject();\n        return treeify_1.default.asTree(obj, true);\n    }\n    /**\n     * toString\n     * @desc Returns a visual representation of the merkle tree as a string.\n     * @example\n     *```js\n     *console.log(tree.toString())\n     *```\n     */\n    toString() {\n        return this._toTreeString();\n    }\n    isUnevenTree(treeLayers) {\n        const depth = (treeLayers === null || treeLayers === void 0 ? void 0 : treeLayers.length) || this.getDepth();\n        return !this.isPowOf2(depth);\n    }\n    isPowOf2(v) {\n        return v && !(v & (v - 1));\n    }\n    calculateRootForUnevenTree(leafIndices, leafHashes, totalLeavesCount, proofHashes) {\n        const leafTuples = this._zip(leafIndices, leafHashes).sort(([indexA], [indexB]) => indexA - indexB);\n        const leafTupleIndices = leafTuples.map(([index]) => index);\n        const proofIndices = this.getProofIndicesForUnevenTree(leafTupleIndices, totalLeavesCount);\n        let nextSliceStart = 0;\n        const proofTuplesByLayers = [];\n        for (let i = 0; i < proofIndices.length; i++) {\n            const indices = proofIndices[i];\n            const sliceStart = nextSliceStart;\n            nextSliceStart += indices.length;\n            proofTuplesByLayers[i] = this._zip(indices, proofHashes.slice(sliceStart, nextSliceStart));\n        }\n        const tree = [leafTuples];\n        for (let layerIndex = 0; layerIndex < proofTuplesByLayers.length; layerIndex++) {\n            const currentLayer = proofTuplesByLayers[layerIndex].concat(tree[layerIndex]).sort(([indexA], [indexB]) => indexA - indexB)\n                .map(([, hash]) => hash);\n            const s = tree[layerIndex].map(([layerIndex]) => layerIndex);\n            const parentIndices = [...new Set(s.map((index) => {\n                    if (index % 2 === 0) {\n                        return index / 2;\n                    }\n                    if (index % 2 === 0) {\n                        return (index + 1) / 2;\n                    }\n                    return (index - 1) / 2;\n                }))];\n            const parentLayer = [];\n            for (let i = 0; i < parentIndices.length; i++) {\n                const parentNodeTreeIndex = parentIndices[i];\n                const bufA = currentLayer[i * 2];\n                const bufB = currentLayer[i * 2 + 1];\n                const hash = bufB ? this.hashFn(Buffer.concat([bufA, bufB])) : bufA;\n                parentLayer.push([parentNodeTreeIndex, hash]);\n            }\n            tree.push(parentLayer);\n        }\n        return tree[tree.length - 1][0][1];\n    }\n}\nexports.MerkleTree = MerkleTree;\nif (typeof window !== 'undefined') {\n    ;\n    window.MerkleTree = MerkleTree;\n}\nexports.default = MerkleTree;\n"]},"metadata":{},"sourceType":"script"}