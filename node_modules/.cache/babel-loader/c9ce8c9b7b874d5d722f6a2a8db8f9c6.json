{"ast":null,"code":"// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\"; // log\n\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\"\n  };\n};\n\nconst connectSuccess = payload => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst connectFailed = payload => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload\n  };\n};\n\nconst updateAccountRequest = payload => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload\n  };\n};\n\nexport const connect = () => {\n  return async dispatch => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/config/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const CONFIG = await configResponse.json();\n    const {\n      ethereum\n    } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n\n      try {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\"\n        });\n\n        if (networkId == CONFIG.NETWORK.ID) {\n          const SmartContractObj = new Web3EthContract(abi, CONFIG.CONTRACT_ADDRESS);\n          dispatch(connectSuccess({\n            account: accounts[0],\n            smartContract: SmartContractObj,\n            web3: web3\n          })); // Add listeners start\n\n          ethereum.on(\"accountsChanged\", accounts => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          }); // Add listeners end\n        } else {\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      const connectWalletConnect = async () => {\n        try {\n          const provider = new WalletConnectProvider({\n            rpc: {\n              56: \"https://bsc-dataseed.binance.org/\" // 97: \"https://data-seed-prebsc-1-s1.binance.org:8545/\",\n\n            },\n            // network: \"binance\",\n            // chainId: 56,\n            infuraId: null\n          });\n          await provider.enable();\n          const web3 = new Web3(provider);\n          const accounts = await web3.eth.getAccounts();\n          setUserAddress(accounts[0]);\n          setWalletType(\"Trust_wallet\");\n          setPopupShow(false);\n        } catch (error) {\n          console.log(error);\n        }\n      };\n    }\n  };\n};\nexport const updateAccount = account => {\n  return async dispatch => {\n    dispatch(updateAccountRequest({\n      account: account\n    }));\n    dispatch(fetchData(account));\n  };\n};","map":{"version":3,"sources":["/Users/mohammedchoudhury/Documents/Coding/Crypto/NFTS/FUKU/FUKU Minting Dapp/src/redux/blockchain/blockchainActions.js"],"names":["Web3EthContract","Web3","WalletConnectProvider","fetchData","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","abiResponse","fetch","headers","Accept","abi","json","configResponse","CONFIG","ethereum","window","metamaskIsInstalled","isMetaMask","setProvider","web3","accounts","request","method","networkId","NETWORK","ID","SmartContractObj","CONTRACT_ADDRESS","account","smartContract","on","updateAccount","location","reload","NAME","err","connectWalletConnect","provider","rpc","infuraId","enable","eth","getAccounts","setUserAddress","setWalletType","setPopupShow","error","console","log"],"mappings":"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","sourcesContent":["// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/config/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const CONFIG = await configResponse.json();\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      try {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\",\n        });\n        if (networkId == CONFIG.NETWORK.ID) {\n          const SmartContractObj = new Web3EthContract(\n            abi,\n            CONFIG.CONTRACT_ADDRESS\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: SmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      const connectWalletConnect = async () => {\n        try {\n          const provider = new WalletConnectProvider({\n            rpc: {\n              56: \"https://bsc-dataseed.binance.org/\",\n    \n              // 97: \"https://data-seed-prebsc-1-s1.binance.org:8545/\",\n            },\n            // network: \"binance\",\n            // chainId: 56,\n            infuraId: null,\n          });\n    \n          await provider.enable();\n    \n          const web3 = new Web3(provider);\n    \n          const accounts = await web3.eth.getAccounts();\n    \n          setUserAddress(accounts[0]);\n          setWalletType(\"Trust_wallet\");\n    \n          setPopupShow(false);\n        } catch (error) {\n          console.log(error);\n        }\n      };\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}