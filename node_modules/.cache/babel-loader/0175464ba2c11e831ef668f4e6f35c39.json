{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mohammedchoudhury/Documents/Coding/Crypto/NFTS/cozy camp/minting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/mohammedchoudhury/Documents/Coding/Crypto/NFTS/cozy camp/minting/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// constants\nimport Web3EthContract from\"web3-eth-contract\";import Web3 from\"web3\";import Web3Modal from\"web3modal\";import WalletConnectProvider from\"@walletconnect/web3-provider\";// log\nimport{fetchData}from\"../data/dataActions\";var INFURA_ID=\"\";var providerOptions={walletconnect:{package:WalletConnectProvider,// required\noptions:{infuraId:INFURA_ID,// required\nrpc:{4:\"https://rinkey.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\"}}}};var connectRequest=function connectRequest(){return{type:\"CONNECTION_REQUEST\"};};var connectSuccess=function connectSuccess(payload){return{type:\"CONNECTION_SUCCESS\",payload:payload};};var connectFailed=function connectFailed(payload){return{type:\"CONNECTION_FAILED\",payload:payload};};var updateAccountRequest=function updateAccountRequest(payload){return{type:\"UPDATE_ACCOUNT\",payload:payload};};export var connect=function connect(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var abiResponse,abi,configResponse,CONFIG,web3Modal,provider,web3,accounts,networkId,SmartContractObj;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(connectRequest());_context.prev=1;_context.next=4;return fetch(\"/config/abi.json\",{headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"}});case 4:abiResponse=_context.sent;_context.next=7;return abiResponse.json();case 7:abi=_context.sent;_context.next=10;return fetch(\"/config/config.json\",{headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"}});case 10:configResponse=_context.sent;_context.next=13;return configResponse.json();case 13:CONFIG=_context.sent;localStorage.removeItem(\"walletconnect\");localStorage.removeItem(\"WALLETCONNECT_DEEPLINK_CHOICE\");web3Modal=new Web3Modal({network:\"mainnet\",// optional\ncacheProvider:false,// optional\nproviderOptions:providerOptions// required\n});_context.next=19;return web3Modal.connect();case 19:provider=_context.sent;web3=new Web3(provider);console.log(\"web\",web3);Web3EthContract.setProvider(provider);_context.next=25;return web3.eth.getAccounts();case 25:accounts=_context.sent;_context.next=28;return provider.request({method:\"net_version\"});case 28:networkId=_context.sent;console.log(\"networkId\",networkId);if(networkId==CONFIG.NETWORK.ID){SmartContractObj=new Web3EthContract(abi,CONFIG.CONTRACT_ADDRESS);dispatch(connectSuccess({account:accounts[0],smartContract:SmartContractObj,web3:web3}));// Add listeners start\nprovider.on(\"accountsChanged\",function(accounts){dispatch(updateAccount(accounts[0]));});provider.on(\"chainChanged\",function(){window.location.reload();});// Add listeners end\n}else{dispatch(connectFailed(\"Change network to \".concat(CONFIG.NETWORK.NAME,\".\")));}_context.next=37;break;case 33:_context.prev=33;_context.t0=_context[\"catch\"](1);console.log(\"error\",_context.t0,\" message\",_context.t0.message);if(typeof _context.t0!==\"undefined\"&&typeof _context.t0.message!==\"undefined\"&&_context.t0.message.includes(\"User Rejected\")){dispatch(connectFailed(\"User rejected the request\"));}else if((typeof _context.t0===\"string\"||_context.t0 instanceof String)&&_context.t0.includes(\"Modal closed by user\")){dispatch(connectFailed(\"Modal closed by user\"));}else{dispatch(connectFailed(\"Something went wrong.\"));}case 37:case\"end\":return _context.stop();}}},_callee,null,[[1,33]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var updateAccount=function updateAccount(account){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dispatch(updateAccountRequest({account:account}));dispatch(fetchData(account));case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/mohammedchoudhury/Documents/Coding/Crypto/NFTS/cozy camp/minting/src/redux/blockchain/blockchainActions.js"],"names":["Web3EthContract","Web3","Web3Modal","WalletConnectProvider","fetchData","INFURA_ID","providerOptions","walletconnect","package","options","infuraId","rpc","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","fetch","headers","Accept","abiResponse","json","abi","configResponse","CONFIG","localStorage","removeItem","web3Modal","network","cacheProvider","provider","web3","console","log","setProvider","eth","getAccounts","accounts","request","method","networkId","NETWORK","ID","SmartContractObj","CONTRACT_ADDRESS","account","smartContract","on","updateAccount","window","location","reload","NAME","message","includes","String"],"mappings":"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","sourcesContent":["// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\n\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst INFURA_ID = \"\";\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider, // required\n    options: {\n      infuraId: INFURA_ID, // required\n      rpc: {\n        4: \"https://rinkey.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\", \n      },\n    },\n  },\n\n};\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    try {\n      const abiResponse = await fetch(\"/config/abi.json\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      });\n      const abi = await abiResponse.json();\n      const configResponse = await fetch(\"/config/config.json\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      });\n      const CONFIG = await configResponse.json();\n      localStorage.removeItem(\"walletconnect\");\n      localStorage.removeItem(\"WALLETCONNECT_DEEPLINK_CHOICE\");\n      const web3Modal = new Web3Modal({\n        network: \"mainnet\", // optional\n        cacheProvider: false, // optional\n        providerOptions, // required\n      });\n      const provider = await web3Modal.connect();\n      const web3 = new Web3(provider);\n      console.log(\"web\", web3);\n\n      Web3EthContract.setProvider(provider);\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await provider.request({\n        method: \"net_version\",\n      });\n      console.log(\"networkId\", networkId);\n      if (networkId == CONFIG.NETWORK.ID) {\n        const SmartContractObj = new Web3EthContract(\n          abi,\n          CONFIG.CONTRACT_ADDRESS\n        );\n        dispatch(\n          connectSuccess({\n            account: accounts[0],\n            smartContract: SmartContractObj,\n            web3: web3,\n          })\n        );\n        // Add listeners start\n        provider.on(\"accountsChanged\", (accounts) => {\n          dispatch(updateAccount(accounts[0]));\n        });\n        provider.on(\"chainChanged\", () => {\n          window.location.reload();\n        });\n        // Add listeners end\n      } else {\n        dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n      }\n    } catch (err) {\n      console.log(\"error\", err, \" message\", err.message);\n      if (\n        typeof err !== \"undefined\" &&\n        typeof err.message !== \"undefined\" &&\n        err.message.includes(\"User Rejected\")\n      ) {\n        dispatch(connectFailed(\"User rejected the request\"));\n      } else if (\n        (typeof err === \"string\" || err instanceof String) &&\n        err.includes(\"Modal closed by user\")\n      ) {\n        dispatch(connectFailed(\"Modal closed by user\"));\n      } else {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}